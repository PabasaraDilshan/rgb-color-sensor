
sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f3  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c0  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017e  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0b00001111;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11110000;
  84:	80 ef       	ldi	r24, 0xF0	; 240
  86:	85 b9       	out	0x05, r24	; 5
	DDRD = 0b11111111;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	40 e7       	ldi	r20, 0x70	; 112
  90:	52 e0       	ldi	r21, 0x02	; 2
  92:	21 50       	subi	r18, 0x01	; 1
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
	char charArray[4][4] = {{ '7', '4', '1', 'N'}, { '8', '5', '2', '0'}, { '9', '6', '3', '='}, { '/', '*', '-', '+'}};
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(100);
		PORTB = 0b11110000;
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	85 b9       	out	0x05, r24	; 5
		if ((PINB & 0b11110000) == 0b11110000){
  a2:	83 b1       	in	r24, 0x03	; 3
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	80 3f       	cpi	r24, 0xF0	; 240
  a8:	89 f3       	breq	.-30     	; 0x8c <main+0xc>
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	5d c0       	rjmp	.+186    	; 0x16a <main+0xea>
			continue;
		}
		else{
			for (int j = 0; j<=3; j++){
				PORTB = 0b11110000;
  b0:	80 ef       	ldi	r24, 0xF0	; 240
  b2:	85 b9       	out	0x05, r24	; 5
				for (int k=0; k<j; k++){
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	0d c0       	rjmp	.+26     	; 0xd4 <main+0x54>
					PORTB|=(1<<k);
  ba:	45 b1       	in	r20, 0x05	; 5
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x48>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <main+0x44>
  cc:	84 2b       	or	r24, r20
  ce:	85 b9       	out	0x05, r24	; 5
			continue;
		}
		else{
			for (int j = 0; j<=3; j++){
				PORTB = 0b11110000;
				for (int k=0; k<j; k++){
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	26 17       	cp	r18, r22
  d6:	37 07       	cpc	r19, r23
  d8:	84 f3       	brlt	.-32     	; 0xba <main+0x3a>
					PORTB|=(1<<k);
				}
				for (int k = j+1; k<=3; k++){
  da:	fb 01       	movw	r30, r22
  dc:	31 96       	adiw	r30, 0x01	; 1
  de:	9f 01       	movw	r18, r30
  e0:	0d c0       	rjmp	.+26     	; 0xfc <main+0x7c>
					PORTB|=(1<<k);
  e2:	45 b1       	in	r20, 0x05	; 5
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 2e       	mov	r0, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x70>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x6c>
  f4:	84 2b       	or	r24, r20
  f6:	85 b9       	out	0x05, r24	; 5
			for (int j = 0; j<=3; j++){
				PORTB = 0b11110000;
				for (int k=0; k<j; k++){
					PORTB|=(1<<k);
				}
				for (int k = j+1; k<=3; k++){
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	24 30       	cpi	r18, 0x04	; 4
  fe:	31 05       	cpc	r19, r1
 100:	84 f3       	brlt	.-32     	; 0xe2 <main+0x62>
					PORTB|=(1<<k);
				}
				x = PINB;
 102:	83 b1       	in	r24, 0x03	; 3
 104:	48 2f       	mov	r20, r24
 106:	50 e0       	ldi	r21, 0x00	; 0
				if ((x & 0b11110000) != 0b11110000){
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	41 f5       	brne	.+80     	; 0x15e <main+0xde>
		PORTB = 0b11110000;
		if ((PINB & 0b11110000) == 0b11110000){
			continue;
		}
		else{
			for (int j = 0; j<=3; j++){
 10e:	bf 01       	movw	r22, r30
 110:	2c c0       	rjmp	.+88     	; 0x16a <main+0xea>
				}
				x = PINB;
				if ((x & 0b11110000) != 0b11110000){
					col = j;
					for (int i = 4 ; i<=7 ; i++){
						if (x & (1<<i)){
 112:	9a 01       	movw	r18, r20
 114:	08 2e       	mov	r0, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x9c>
 118:	35 95       	asr	r19
 11a:	27 95       	ror	r18
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <main+0x98>
 120:	20 ff       	sbrs	r18, 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0xa8>
					PORTB|=(1<<k);
				}
				x = PINB;
				if ((x & 0b11110000) != 0b11110000){
					col = j;
					for (int i = 4 ; i<=7 ; i++){
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	1d c0       	rjmp	.+58     	; 0x162 <main+0xe2>
						if (x & (1<<i)){
							continue;
						}
						else{
							row = i-4;
 128:	04 97       	sbiw	r24, 0x04	; 4
							PORTD = 0b1<<row | 0b1<<col;
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	a9 01       	movw	r20, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0xb6>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <main+0xb2>
 13a:	02 c0       	rjmp	.+4      	; 0x140 <main+0xc0>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <main+0xbc>
 144:	24 2b       	or	r18, r20
 146:	2b b9       	out	0x0b, r18	; 11
 148:	5f ef       	ldi	r21, 0xFF	; 255
 14a:	80 e7       	ldi	r24, 0x70	; 112
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	51 50       	subi	r21, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xce>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xd8>
 158:	00 00       	nop
							_delay_ms(100);
							PORTD = 0b00000000;
 15a:	1b b8       	out	0x0b, r1	; 11
							break;
 15c:	97 cf       	rjmp	.-210    	; 0x8c <main+0xc>
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	90 e0       	ldi	r25, 0x00	; 0
					PORTB|=(1<<k);
				}
				x = PINB;
				if ((x & 0b11110000) != 0b11110000){
					col = j;
					for (int i = 4 ; i<=7 ; i++){
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	91 05       	cpc	r25, r1
 166:	ac f2       	brlt	.-86     	; 0x112 <main+0x92>
 168:	91 cf       	rjmp	.-222    	; 0x8c <main+0xc>
		PORTB = 0b11110000;
		if ((PINB & 0b11110000) == 0b11110000){
			continue;
		}
		else{
			for (int j = 0; j<=3; j++){
 16a:	64 30       	cpi	r22, 0x04	; 4
 16c:	71 05       	cpc	r23, r1
 16e:	0c f4       	brge	.+2      	; 0x172 <main+0xf2>
 170:	9f cf       	rjmp	.-194    	; 0xb0 <main+0x30>
 172:	8c cf       	rjmp	.-232    	; 0x8c <main+0xc>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
