
LCDdisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000025e  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b32  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e4  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000404  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000413  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 11 01 	call	0x222	; 0x222 <main>
  8e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcdCommand>:
void lcdGotoXY(unsigned char x, unsigned char y);
void lcdPrint();

void lcdCommand(unsigned char cmnd)
{
	LCD_DPRT = ((cmnd & 0xF0)>>3);
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	35 95       	asr	r19
  9e:	27 95       	ror	r18
  a0:	35 95       	asr	r19
  a2:	27 95       	ror	r18
  a4:	35 95       	asr	r19
  a6:	27 95       	ror	r18
  a8:	28 b9       	out	0x08, r18	; 8
	LCD_CPRT &= ~(1<<LCD_RS);
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	9e 7f       	andi	r25, 0xFE	; 254
  ae:	9b b9       	out	0x0b, r25	; 11
	LCD_CPRT &= ~(1<<LCD_RW);
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9d 7f       	andi	r25, 0xFD	; 253
  b4:	9b b9       	out	0x0b, r25	; 11
	LCD_CPRT |= (1<<LCD_EN);
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	94 60       	ori	r25, 0x04	; 4
  ba:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	22 e0       	ldi	r18, 0x02	; 2
  be:	2a 95       	dec	r18
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcdCommand+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcdCommand+0x2e>
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN);
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	9b 7f       	andi	r25, 0xFB	; 251
  c8:	9b b9       	out	0x0b, r25	; 11
  ca:	e7 ec       	ldi	r30, 0xC7	; 199
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcdCommand+0x38>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcdCommand+0x3e>
  d4:	00 00       	nop
	_delay_us(100);
	LCD_DPRT = ((cmnd<<4)>>3);
  d6:	f0 e1       	ldi	r31, 0x10	; 16
  d8:	8f 9f       	mul	r24, r31
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	95 95       	asr	r25
  e8:	87 95       	ror	r24
  ea:	88 b9       	out	0x08, r24	; 8
	LCD_CPRT |= (1<<LCD_EN);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	2a 95       	dec	r18
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcdCommand+0x5e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcdCommand+0x64>
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN);
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	87 ec       	ldi	r24, 0xC7	; 199
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcdCommand+0x6e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcdCommand+0x74>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <lcdData>:
	_delay_us(100);
}

void lcdData(unsigned char data)
{
	LCD_DPRT = ((data & 0xF0)>>3);
 10e:	28 2f       	mov	r18, r24
 110:	20 7f       	andi	r18, 0xF0	; 240
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	35 95       	asr	r19
 116:	27 95       	ror	r18
 118:	35 95       	asr	r19
 11a:	27 95       	ror	r18
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	28 b9       	out	0x08, r18	; 8
	LCD_CPRT |= (1<<LCD_RS);
 122:	9b b1       	in	r25, 0x0b	; 11
 124:	91 60       	ori	r25, 0x01	; 1
 126:	9b b9       	out	0x0b, r25	; 11
	LCD_CPRT &= ~(1<<LCD_RW);
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	9d 7f       	andi	r25, 0xFD	; 253
 12c:	9b b9       	out	0x0b, r25	; 11
	LCD_CPRT |= (1<<LCD_EN);
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	94 60       	ori	r25, 0x04	; 4
 132:	9b b9       	out	0x0b, r25	; 11
 134:	22 e0       	ldi	r18, 0x02	; 2
 136:	2a 95       	dec	r18
 138:	f1 f7       	brne	.-4      	; 0x136 <lcdData+0x28>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcdData+0x2e>
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN);
 13c:	9b b1       	in	r25, 0x0b	; 11
 13e:	9b 7f       	andi	r25, 0xFB	; 251
 140:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT = ((data<<4)>>3);
 142:	20 e1       	ldi	r18, 0x10	; 16
 144:	82 9f       	mul	r24, r18
 146:	c0 01       	movw	r24, r0
 148:	11 24       	eor	r1, r1
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
 152:	95 95       	asr	r25
 154:	87 95       	ror	r24
 156:	88 b9       	out	0x08, r24	; 8
	LCD_CPRT |= (1<<LCD_EN);
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	8a 95       	dec	r24
 162:	f1 f7       	brne	.-4      	; 0x160 <lcdData+0x52>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcdData+0x58>
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8b 7f       	andi	r24, 0xFB	; 251
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	87 ec       	ldi	r24, 0xC7	; 199
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcdData+0x62>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcdData+0x68>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <lcdInit>:
	_delay_us(100);
}

void lcdInit()
{
	LCD_DDDR = 0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	87 b9       	out	0x07, r24	; 7
	LCD_CDDR = 0xFF;
 17e:	8a b9       	out	0x0a, r24	; 10
	LCD_CPRT &= ~(1<<LCD_EN);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8b 7f       	andi	r24, 0xFB	; 251
 184:	8b b9       	out	0x0b, r24	; 11
	lcdCommand(0x33);
 186:	83 e3       	ldi	r24, 0x33	; 51
 188:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x32);
 18c:	82 e3       	ldi	r24, 0x32	; 50
 18e:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x28);
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x0E);
 198:	8e e0       	ldi	r24, 0x0E	; 14
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
	lcdCommand(0x01);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcdInit+0x2e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcdInit+0x34>
 1ae:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x06);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 1b6:	08 95       	ret

000001b8 <lcdGotoXY>:
}

void lcdGotoXY(unsigned char x, unsigned char y)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	00 d0       	rcall	.+0      	; 0x1be <lcdGotoXY+0x6>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[]={0x80, 0xC0};
 1c2:	90 e8       	ldi	r25, 0x80	; 128
 1c4:	99 83       	std	Y+1, r25	; 0x01
 1c6:	90 ec       	ldi	r25, 0xC0	; 192
 1c8:	9a 83       	std	Y+2, r25	; 0x02
	lcdCommand(firstCharAdr[y-1] + x - 1);
 1ca:	e6 2f       	mov	r30, r22
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	2c 0f       	add	r18, r28
 1d6:	3d 1f       	adc	r19, r29
 1d8:	e2 0f       	add	r30, r18
 1da:	f3 1f       	adc	r31, r19
 1dc:	90 81       	ld	r25, Z
 1de:	89 0f       	add	r24, r25
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	0e 94 4b 00 	call	0x96	; 0x96 <lcdCommand>
 1e6:	87 ec       	ldi	r24, 0xC7	; 199
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcdGotoXY+0x32>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcdGotoXY+0x38>
 1f0:	00 00       	nop
	_delay_us(100);
}
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcdPrint>:

void lcdPrint(char*str)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 204:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] != 0)
 206:	03 c0       	rjmp	.+6      	; 0x20e <lcdPrint+0x12>
	{
		lcdData(str[i]);
 208:	0e 94 87 00 	call	0x10e	; 0x10e <lcdData>
		i++;
 20c:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcdPrint(char*str)
{
	unsigned char i = 0;
	while (str[i] != 0)
 20e:	f8 01       	movw	r30, r16
 210:	ec 0f       	add	r30, r28
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	81 11       	cpse	r24, r1
 218:	f7 cf       	rjmp	.-18     	; 0x208 <lcdPrint+0xc>
	{
		lcdData(str[i]);
		i++;
	}
}
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <main>:
	lcdData(0x40);
}*/

int main (void)
{
	lcdInit();
 222:	0e 94 bd 00 	call	0x17a	; 0x17a <lcdInit>
	//_delay_ms(3000);
	lcdGotoXY(1,1);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcdGotoXY>
	lcdPrint("HI");
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	89 e6       	ldi	r24, 0x69	; 105
 23a:	98 e1       	ldi	r25, 0x18	; 24
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x1a>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x24>
 246:	00 00       	nop
	_delay_ms(1000);
	lcdGotoXY(10,1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcdGotoXY>
	lcdPrint("Hey");
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcdPrint>
 258:	ff cf       	rjmp	.-2      	; 0x258 <main+0x36>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
