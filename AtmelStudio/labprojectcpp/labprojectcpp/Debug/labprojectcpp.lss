
labprojectcpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001098  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000764  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ed  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009f8  00000000  00000000  00002577  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  78:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN7Lcd4bit8lcd4initEv>:
		Lcd4bit(int p){
			this->pin = p;
		}
		void lcd4init(){
		
		LCD_DDDR |= 0xF0; //PORTD as Output
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 6f       	ori	r24, 0xF0	; 240
  84:	8a b9       	out	0x0a, r24	; 10
		LCD_CDDR |= 0x07; //PORTC as Output
  86:	87 b1       	in	r24, 0x07	; 7
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	87 b9       	out	0x07, r24	; 7
		
		
		LCD_CPRT &= ~(1<<LCD_EN);//EN =0
  8c:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e9       	ldi	r24, 0x9F	; 159
  90:	9f e0       	ldi	r25, 0x0F	; 15
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <_ZN7Lcd4bit8lcd4initEv+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN7Lcd4bit8lcd4initEv+0x18>
  98:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	80 63       	ori	r24, 0x30	; 48
  a0:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
  a2:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
  a4:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
  a6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	9a 95       	dec	r25
  ac:	f1 f7       	brne	.-4      	; 0xaa <_ZN7Lcd4bit8lcd4initEv+0x2a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN7Lcd4bit8lcd4initEv+0x30>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
  b0:	40 98       	cbi	0x08, 0	; 8
  b2:	87 ec       	ldi	r24, 0xC7	; 199
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_ZN7Lcd4bit8lcd4initEv+0x36>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN7Lcd4bit8lcd4initEv+0x3c>
  bc:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	80 63       	ori	r24, 0x30	; 48
  c4:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
  c6:	40 9a       	sbi	0x08, 0	; 8
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <_ZN7Lcd4bit8lcd4initEv+0x4a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN7Lcd4bit8lcd4initEv+0x50>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
  d0:	40 98       	cbi	0x08, 0	; 8
  d2:	87 ec       	ldi	r24, 0xC7	; 199
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_ZN7Lcd4bit8lcd4initEv+0x56>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_ZN7Lcd4bit8lcd4initEv+0x5c>
  dc:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_ZN7Lcd4bit8lcd4initEv+0x62>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_ZN7Lcd4bit8lcd4initEv+0x68>
  e8:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	80 63       	ori	r24, 0x30	; 48
  f0:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
  f2:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
  f4:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
  f6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	92 e0       	ldi	r25, 0x02	; 2
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <_ZN7Lcd4bit8lcd4initEv+0x7a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_ZN7Lcd4bit8lcd4initEv+0x80>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 100:	40 98       	cbi	0x08, 0	; 8
 102:	87 ec       	ldi	r24, 0xC7	; 199
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <_ZN7Lcd4bit8lcd4initEv+0x86>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_ZN7Lcd4bit8lcd4initEv+0x8c>
 10c:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 116:	40 9a       	sbi	0x08, 0	; 8
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <_ZN7Lcd4bit8lcd4initEv+0x9a>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_ZN7Lcd4bit8lcd4initEv+0xa0>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 120:	40 98       	cbi	0x08, 0	; 8
 122:	87 ec       	ldi	r24, 0xC7	; 199
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <_ZN7Lcd4bit8lcd4initEv+0xa6>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZN7Lcd4bit8lcd4initEv+0xac>
 12c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <_ZN7Lcd4bit8lcd4initEv+0xb2>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN7Lcd4bit8lcd4initEv+0xb8>
 138:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 70       	andi	r24, 0x0F	; 15
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 142:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 144:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 146:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <_ZN7Lcd4bit8lcd4initEv+0xca>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN7Lcd4bit8lcd4initEv+0xd0>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 150:	40 98       	cbi	0x08, 0	; 8
 152:	87 ec       	ldi	r24, 0xC7	; 199
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <_ZN7Lcd4bit8lcd4initEv+0xd6>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <_ZN7Lcd4bit8lcd4initEv+0xdc>
 15c:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 166:	40 9a       	sbi	0x08, 0	; 8
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <_ZN7Lcd4bit8lcd4initEv+0xea>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_ZN7Lcd4bit8lcd4initEv+0xf0>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 170:	40 98       	cbi	0x08, 0	; 8
 172:	87 ec       	ldi	r24, 0xC7	; 199
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <_ZN7Lcd4bit8lcd4initEv+0xf6>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN7Lcd4bit8lcd4initEv+0xfc>
 17c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <_ZN7Lcd4bit8lcd4initEv+0x102>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_ZN7Lcd4bit8lcd4initEv+0x108>
 188:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 190:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 192:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 194:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <_ZN7Lcd4bit8lcd4initEv+0x118>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_ZN7Lcd4bit8lcd4initEv+0x11e>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 19e:	40 98       	cbi	0x08, 0	; 8
 1a0:	87 ec       	ldi	r24, 0xC7	; 199
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_ZN7Lcd4bit8lcd4initEv+0x124>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <_ZN7Lcd4bit8lcd4initEv+0x12a>
 1aa:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	80 6e       	ori	r24, 0xE0	; 224
 1b2:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 1b4:	40 9a       	sbi	0x08, 0	; 8
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_ZN7Lcd4bit8lcd4initEv+0x138>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <_ZN7Lcd4bit8lcd4initEv+0x13e>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	87 ec       	ldi	r24, 0xC7	; 199
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_ZN7Lcd4bit8lcd4initEv+0x144>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_ZN7Lcd4bit8lcd4initEv+0x14a>
 1ca:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f e9       	ldi	r24, 0x9F	; 159
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_ZN7Lcd4bit8lcd4initEv+0x150>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN7Lcd4bit8lcd4initEv+0x156>
 1d6:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 1de:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 1e0:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 1e2:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	9a 95       	dec	r25
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_ZN7Lcd4bit8lcd4initEv+0x166>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_ZN7Lcd4bit8lcd4initEv+0x16c>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 1ec:	40 98       	cbi	0x08, 0	; 8
 1ee:	87 ec       	ldi	r24, 0xC7	; 199
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_ZN7Lcd4bit8lcd4initEv+0x172>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_ZN7Lcd4bit8lcd4initEv+0x178>
 1f8:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	80 61       	ori	r24, 0x10	; 16
 200:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 202:	40 9a       	sbi	0x08, 0	; 8
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <_ZN7Lcd4bit8lcd4initEv+0x186>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN7Lcd4bit8lcd4initEv+0x18c>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 20c:	40 98       	cbi	0x08, 0	; 8
 20e:	87 ec       	ldi	r24, 0xC7	; 199
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <_ZN7Lcd4bit8lcd4initEv+0x192>
 216:	00 c0       	rjmp	.+0      	; 0x218 <_ZN7Lcd4bit8lcd4initEv+0x198>
 218:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <_ZN7Lcd4bit8lcd4initEv+0x19e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <_ZN7Lcd4bit8lcd4initEv+0x1a4>
 224:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 22c:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 22e:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 230:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <_ZN7Lcd4bit8lcd4initEv+0x1b4>
 238:	00 c0       	rjmp	.+0      	; 0x23a <_ZN7Lcd4bit8lcd4initEv+0x1ba>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 23a:	40 98       	cbi	0x08, 0	; 8
 23c:	87 ec       	ldi	r24, 0xC7	; 199
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <_ZN7Lcd4bit8lcd4initEv+0x1c0>
 244:	00 c0       	rjmp	.+0      	; 0x246 <_ZN7Lcd4bit8lcd4initEv+0x1c6>
 246:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	80 66       	ori	r24, 0x60	; 96
 24e:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 250:	40 9a       	sbi	0x08, 0	; 8
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	9a 95       	dec	r25
 256:	f1 f7       	brne	.-4      	; 0x254 <_ZN7Lcd4bit8lcd4initEv+0x1d4>
 258:	00 c0       	rjmp	.+0      	; 0x25a <_ZN7Lcd4bit8lcd4initEv+0x1da>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 25a:	40 98       	cbi	0x08, 0	; 8
 25c:	87 ec       	ldi	r24, 0xC7	; 199
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <_ZN7Lcd4bit8lcd4initEv+0x1e0>
 264:	00 c0       	rjmp	.+0      	; 0x266 <_ZN7Lcd4bit8lcd4initEv+0x1e6>
 266:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	8f e9       	ldi	r24, 0x9F	; 159
 26a:	9f e0       	ldi	r25, 0x0F	; 15
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <_ZN7Lcd4bit8lcd4initEv+0x1ec>
 270:	00 c0       	rjmp	.+0      	; 0x272 <_ZN7Lcd4bit8lcd4initEv+0x1f2>
 272:	00 00       	nop
 274:	08 95       	ret

00000276 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <Lcd4bit.h>

int main(void)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	00 d0       	rcall	.+0      	; 0x27c <main+0x6>
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62

class Lcd4bit{
	public:
		int pin;
		Lcd4bit(int p){
			this->pin = p;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	89 83       	std	Y+1, r24	; 0x01
    /* Replace with your application code */
	Lcd4bit lcd(1);
	lcd.lcd4init();
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	0e 94 40 00 	call	0x80	; 0x80 <_ZN7Lcd4bit8lcd4initEv>
 290:	ff cf       	rjmp	.-2      	; 0x290 <main+0x1a>

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
