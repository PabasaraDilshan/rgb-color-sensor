
labprojectcpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000782  00000816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  0000081c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ff  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d0  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000659  00000000  00000000  0000268b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ca  00000000  00000000  00003283  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000444d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 10 02 	call	0x420	; 0x420 <main>
  9e:	0c 94 bf 03 	jmp	0x77e	; 0x77e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN7Lcd4bit8lcd4initEv>:
		Lcd4bit(int p){
			this->pin = p;
		}
		void lcd4init(){
		
		LCD_DDDR |= 0xF0; //PORTD as Output
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10
		LCD_CDDR |= 0x07; //PORTC as Output
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	87 b9       	out	0x07, r24	; 7
		
		
		LCD_CPRT &= ~(1<<LCD_EN);//EN =0
  b2:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e9       	ldi	r24, 0x9F	; 159
  b6:	9f e0       	ldi	r25, 0x0F	; 15
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <_ZN7Lcd4bit8lcd4initEv+0x12>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN7Lcd4bit8lcd4initEv+0x18>
  be:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	80 63       	ori	r24, 0x30	; 48
  c6:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
  c8:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
  ca:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
  cc:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_ZN7Lcd4bit8lcd4initEv+0x2a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_ZN7Lcd4bit8lcd4initEv+0x30>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
  d6:	40 98       	cbi	0x08, 0	; 8
  d8:	87 ec       	ldi	r24, 0xC7	; 199
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <_ZN7Lcd4bit8lcd4initEv+0x36>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_ZN7Lcd4bit8lcd4initEv+0x3c>
  e2:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	80 63       	ori	r24, 0x30	; 48
  ea:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
  ec:	40 9a       	sbi	0x08, 0	; 8
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_ZN7Lcd4bit8lcd4initEv+0x4a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN7Lcd4bit8lcd4initEv+0x50>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	87 ec       	ldi	r24, 0xC7	; 199
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <_ZN7Lcd4bit8lcd4initEv+0x56>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_ZN7Lcd4bit8lcd4initEv+0x5c>
 102:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_ZN7Lcd4bit8lcd4initEv+0x62>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN7Lcd4bit8lcd4initEv+0x68>
 10e:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	80 63       	ori	r24, 0x30	; 48
 116:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 118:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 11a:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 11c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	92 e0       	ldi	r25, 0x02	; 2
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <_ZN7Lcd4bit8lcd4initEv+0x7a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN7Lcd4bit8lcd4initEv+0x80>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 126:	40 98       	cbi	0x08, 0	; 8
 128:	87 ec       	ldi	r24, 0xC7	; 199
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <_ZN7Lcd4bit8lcd4initEv+0x86>
 130:	00 c0       	rjmp	.+0      	; 0x132 <_ZN7Lcd4bit8lcd4initEv+0x8c>
 132:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 13c:	40 9a       	sbi	0x08, 0	; 8
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <_ZN7Lcd4bit8lcd4initEv+0x9a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <_ZN7Lcd4bit8lcd4initEv+0xa0>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 146:	40 98       	cbi	0x08, 0	; 8
 148:	87 ec       	ldi	r24, 0xC7	; 199
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <_ZN7Lcd4bit8lcd4initEv+0xa6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <_ZN7Lcd4bit8lcd4initEv+0xac>
 152:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e9       	ldi	r24, 0x9F	; 159
 156:	9f e0       	ldi	r25, 0x0F	; 15
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <_ZN7Lcd4bit8lcd4initEv+0xb2>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_ZN7Lcd4bit8lcd4initEv+0xb8>
 15e:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 168:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 16a:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 16c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <_ZN7Lcd4bit8lcd4initEv+0xca>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZN7Lcd4bit8lcd4initEv+0xd0>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 176:	40 98       	cbi	0x08, 0	; 8
 178:	87 ec       	ldi	r24, 0xC7	; 199
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <_ZN7Lcd4bit8lcd4initEv+0xd6>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_ZN7Lcd4bit8lcd4initEv+0xdc>
 182:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 18c:	40 9a       	sbi	0x08, 0	; 8
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <_ZN7Lcd4bit8lcd4initEv+0xea>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_ZN7Lcd4bit8lcd4initEv+0xf0>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 196:	40 98       	cbi	0x08, 0	; 8
 198:	87 ec       	ldi	r24, 0xC7	; 199
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <_ZN7Lcd4bit8lcd4initEv+0xf6>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_ZN7Lcd4bit8lcd4initEv+0xfc>
 1a2:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f e9       	ldi	r24, 0x9F	; 159
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <_ZN7Lcd4bit8lcd4initEv+0x102>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_ZN7Lcd4bit8lcd4initEv+0x108>
 1ae:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 1b6:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 1b8:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 1ba:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <_ZN7Lcd4bit8lcd4initEv+0x118>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN7Lcd4bit8lcd4initEv+0x11e>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 1c4:	40 98       	cbi	0x08, 0	; 8
 1c6:	87 ec       	ldi	r24, 0xC7	; 199
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <_ZN7Lcd4bit8lcd4initEv+0x124>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN7Lcd4bit8lcd4initEv+0x12a>
 1d0:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	80 6e       	ori	r24, 0xE0	; 224
 1d8:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 1da:	40 9a       	sbi	0x08, 0	; 8
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <_ZN7Lcd4bit8lcd4initEv+0x138>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN7Lcd4bit8lcd4initEv+0x13e>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 1e4:	40 98       	cbi	0x08, 0	; 8
 1e6:	87 ec       	ldi	r24, 0xC7	; 199
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <_ZN7Lcd4bit8lcd4initEv+0x144>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <_ZN7Lcd4bit8lcd4initEv+0x14a>
 1f0:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_ZN7Lcd4bit8lcd4initEv+0x150>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_ZN7Lcd4bit8lcd4initEv+0x156>
 1fc:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 204:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 206:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 208:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <_ZN7Lcd4bit8lcd4initEv+0x166>
 210:	00 c0       	rjmp	.+0      	; 0x212 <_ZN7Lcd4bit8lcd4initEv+0x16c>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 212:	40 98       	cbi	0x08, 0	; 8
 214:	87 ec       	ldi	r24, 0xC7	; 199
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <_ZN7Lcd4bit8lcd4initEv+0x172>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <_ZN7Lcd4bit8lcd4initEv+0x178>
 21e:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	8f 70       	andi	r24, 0x0F	; 15
 224:	80 61       	ori	r24, 0x10	; 16
 226:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 228:	40 9a       	sbi	0x08, 0	; 8
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	9a 95       	dec	r25
 22e:	f1 f7       	brne	.-4      	; 0x22c <_ZN7Lcd4bit8lcd4initEv+0x186>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_ZN7Lcd4bit8lcd4initEv+0x18c>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 232:	40 98       	cbi	0x08, 0	; 8
 234:	87 ec       	ldi	r24, 0xC7	; 199
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <_ZN7Lcd4bit8lcd4initEv+0x192>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <_ZN7Lcd4bit8lcd4initEv+0x198>
 23e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <_ZN7Lcd4bit8lcd4initEv+0x19e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_ZN7Lcd4bit8lcd4initEv+0x1a4>
 24a:	00 00       	nop
		
		this->lcd4command(0x06);//shift cursor to right
		
	}
		void lcd4command(int data){
		LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 252:	42 98       	cbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 254:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 256:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <_ZN7Lcd4bit8lcd4initEv+0x1b4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <_ZN7Lcd4bit8lcd4initEv+0x1ba>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 260:	40 98       	cbi	0x08, 0	; 8
 262:	87 ec       	ldi	r24, 0xC7	; 199
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <_ZN7Lcd4bit8lcd4initEv+0x1c0>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <_ZN7Lcd4bit8lcd4initEv+0x1c6>
 26c:	00 00       	nop
		_delay_us(100);
		LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	80 66       	ori	r24, 0x60	; 96
 274:	8b b9       	out	0x0b, r24	; 11

		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 276:	40 9a       	sbi	0x08, 0	; 8
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	9a 95       	dec	r25
 27c:	f1 f7       	brne	.-4      	; 0x27a <_ZN7Lcd4bit8lcd4initEv+0x1d4>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <_ZN7Lcd4bit8lcd4initEv+0x1da>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN);
 280:	40 98       	cbi	0x08, 0	; 8
 282:	87 ec       	ldi	r24, 0xC7	; 199
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <_ZN7Lcd4bit8lcd4initEv+0x1e0>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <_ZN7Lcd4bit8lcd4initEv+0x1e6>
 28c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <_ZN7Lcd4bit8lcd4initEv+0x1ec>
 296:	00 c0       	rjmp	.+0      	; 0x298 <_ZN7Lcd4bit8lcd4initEv+0x1f2>
 298:	00 00       	nop
 29a:	08 95       	ret

0000029c <_ZN8Inttostr4itosEii>:
		this->str = this->itos(num,1);
	}



	char* itos(int num,int count){
 29c:	9f 92       	push	r9
 29e:	af 92       	push	r10
 2a0:	bf 92       	push	r11
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ec 01       	movw	r28, r24
 2b4:	8b 01       	movw	r16, r22
		char* st;
		if(num<10){
 2b6:	6a 30       	cpi	r22, 0x0A	; 10
 2b8:	71 05       	cpc	r23, r1
 2ba:	64 f4       	brge	.+24     	; 0x2d4 <_ZN8Inttostr4itosEii+0x38>
			//st = new char[this->len];
			st = (char*)malloc(this->len*sizeof(char));
 2bc:	e8 80       	ld	r14, Y
 2be:	f9 80       	ldd	r15, Y+1	; 0x01
 2c0:	c7 01       	movw	r24, r14
 2c2:	0e 94 9e 02 	call	0x53c	; 0x53c <malloc>
 2c6:	9c 01       	movw	r18, r24
			st[this->len] = (char)(num+(int)'0');
 2c8:	fc 01       	movw	r30, r24
 2ca:	ee 0d       	add	r30, r14
 2cc:	ff 1d       	adc	r31, r15
 2ce:	00 5d       	subi	r16, 0xD0	; 208
 2d0:	00 83       	st	Z, r16
 2d2:	94 c0       	rjmp	.+296    	; 0x3fc <_ZN8Inttostr4itosEii+0x160>
			
			}else{
			int rem = num%10;
 2d4:	cb 01       	movw	r24, r22
 2d6:	6a e0       	ldi	r22, 0x0A	; 10
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 2de:	e6 2e       	mov	r14, r22
 2e0:	f8 2e       	mov	r15, r24
			st = itos(num/10,count+1);
 2e2:	86 2f       	mov	r24, r22
 2e4:	97 2f       	mov	r25, r23



	char* itos(int num,int count){
		char* st;
		if(num<10){
 2e6:	8a 30       	cpi	r24, 0x0A	; 10
 2e8:	91 05       	cpc	r25, r1
 2ea:	6c f4       	brge	.+26     	; 0x306 <_ZN8Inttostr4itosEii+0x6a>
			//st = new char[this->len];
			st = (char*)malloc(this->len*sizeof(char));
 2ec:	08 81       	ld	r16, Y
 2ee:	19 81       	ldd	r17, Y+1	; 0x01
 2f0:	c8 01       	movw	r24, r16
 2f2:	0e 94 9e 02 	call	0x53c	; 0x53c <malloc>
 2f6:	9c 01       	movw	r18, r24
			st[this->len] = (char)(num+(int)'0');
 2f8:	fc 01       	movw	r30, r24
 2fa:	e0 0f       	add	r30, r16
 2fc:	f1 1f       	adc	r31, r17
 2fe:	90 e3       	ldi	r25, 0x30	; 48
 300:	9e 0d       	add	r25, r14
 302:	90 83       	st	Z, r25
 304:	70 c0       	rjmp	.+224    	; 0x3e6 <_ZN8Inttostr4itosEii+0x14a>
			
			}else{
			int rem = num%10;
 306:	6a e0       	ldi	r22, 0x0A	; 10
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 30e:	e8 2e       	mov	r14, r24
			st = itos(num/10,count+1);
 310:	c8 01       	movw	r24, r16
 312:	64 e6       	ldi	r22, 0x64	; 100
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 31a:	d6 2e       	mov	r13, r22
 31c:	86 2f       	mov	r24, r22
 31e:	97 2f       	mov	r25, r23



	char* itos(int num,int count){
		char* st;
		if(num<10){
 320:	8a 30       	cpi	r24, 0x0A	; 10
 322:	91 05       	cpc	r25, r1
 324:	6c f4       	brge	.+26     	; 0x340 <_ZN8Inttostr4itosEii+0xa4>
			//st = new char[this->len];
			st = (char*)malloc(this->len*sizeof(char));
 326:	08 81       	ld	r16, Y
 328:	19 81       	ldd	r17, Y+1	; 0x01
 32a:	c8 01       	movw	r24, r16
 32c:	0e 94 9e 02 	call	0x53c	; 0x53c <malloc>
 330:	9c 01       	movw	r18, r24
			st[this->len] = (char)(num+(int)'0');
 332:	fc 01       	movw	r30, r24
 334:	e0 0f       	add	r30, r16
 336:	f1 1f       	adc	r31, r17
 338:	90 e3       	ldi	r25, 0x30	; 48
 33a:	9d 0d       	add	r25, r13
 33c:	90 83       	st	Z, r25
 33e:	48 c0       	rjmp	.+144    	; 0x3d0 <_ZN8Inttostr4itosEii+0x134>
			
			}else{
			int rem = num%10;
 340:	6a e0       	ldi	r22, 0x0A	; 10
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 348:	98 2e       	mov	r9, r24
			st = itos(num/10,count+1);
 34a:	c8 01       	movw	r24, r16
 34c:	68 ee       	ldi	r22, 0xE8	; 232
 34e:	73 e0       	ldi	r23, 0x03	; 3
 350:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 354:	b6 2e       	mov	r11, r22
 356:	c6 2e       	mov	r12, r22
 358:	d7 2e       	mov	r13, r23



	char* itos(int num,int count){
		char* st;
		if(num<10){
 35a:	8a e0       	ldi	r24, 0x0A	; 10
 35c:	c8 16       	cp	r12, r24
 35e:	d1 04       	cpc	r13, r1
 360:	6c f4       	brge	.+26     	; 0x37c <_ZN8Inttostr4itosEii+0xe0>
			//st = new char[this->len];
			st = (char*)malloc(this->len*sizeof(char));
 362:	08 81       	ld	r16, Y
 364:	19 81       	ldd	r17, Y+1	; 0x01
 366:	c8 01       	movw	r24, r16
 368:	0e 94 9e 02 	call	0x53c	; 0x53c <malloc>
 36c:	9c 01       	movw	r18, r24
			st[this->len] = (char)(num+(int)'0');
 36e:	fc 01       	movw	r30, r24
 370:	e0 0f       	add	r30, r16
 372:	f1 1f       	adc	r31, r17
 374:	90 e3       	ldi	r25, 0x30	; 48
 376:	9b 0d       	add	r25, r11
 378:	90 83       	st	Z, r25
 37a:	1f c0       	rjmp	.+62     	; 0x3ba <_ZN8Inttostr4itosEii+0x11e>

	char* itos(int num,int count){
		char* st;
		if(num<10){
			//st = new char[this->len];
			st = (char*)malloc(this->len*sizeof(char));
 37c:	a8 80       	ld	r10, Y
 37e:	b9 80       	ldd	r11, Y+1	; 0x01
 380:	c5 01       	movw	r24, r10
 382:	0e 94 9e 02 	call	0x53c	; 0x53c <malloc>
 386:	9c 01       	movw	r18, r24
			st[this->len] = (char)(num+(int)'0');
 388:	fc 01       	movw	r30, r24
 38a:	ea 0d       	add	r30, r10
 38c:	fb 1d       	adc	r31, r11
 38e:	c8 01       	movw	r24, r16
 390:	60 e1       	ldi	r22, 0x10	; 16
 392:	77 e2       	ldi	r23, 0x27	; 39
 394:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 398:	60 5d       	subi	r22, 0xD0	; 208
 39a:	60 83       	st	Z, r22
			int rem = num%10;
			st = itos(num/10,count+1);
			st[this->len] = 	(char)(rem+(int)'0');
		}
		
		this->len++;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	a8 1a       	sub	r10, r24
 3a0:	b8 0a       	sbc	r11, r24
 3a2:	b9 82       	std	Y+1, r11	; 0x01
 3a4:	a8 82       	st	Y, r10
			st[this->len] = (char)(num+(int)'0');
			
			}else{
			int rem = num%10;
			st = itos(num/10,count+1);
			st[this->len] = 	(char)(rem+(int)'0');
 3a6:	f9 01       	movw	r30, r18
 3a8:	ea 0d       	add	r30, r10
 3aa:	fb 1d       	adc	r31, r11
 3ac:	c6 01       	movw	r24, r12
 3ae:	6a e0       	ldi	r22, 0x0A	; 10
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 76 02 	call	0x4ec	; 0x4ec <__divmodhi4>
 3b6:	80 5d       	subi	r24, 0xD0	; 208
 3b8:	80 83       	st	Z, r24
		}
		
		this->len++;
 3ba:	88 81       	ld	r24, Y
 3bc:	99 81       	ldd	r25, Y+1	; 0x01
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	99 83       	std	Y+1, r25	; 0x01
 3c2:	88 83       	st	Y, r24
			st[this->len] = (char)(num+(int)'0');
			
			}else{
			int rem = num%10;
			st = itos(num/10,count+1);
			st[this->len] = 	(char)(rem+(int)'0');
 3c4:	f9 01       	movw	r30, r18
 3c6:	e8 0f       	add	r30, r24
 3c8:	f9 1f       	adc	r31, r25
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	89 0d       	add	r24, r9
 3ce:	80 83       	st	Z, r24
		}
		
		this->len++;
 3d0:	88 81       	ld	r24, Y
 3d2:	99 81       	ldd	r25, Y+1	; 0x01
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	99 83       	std	Y+1, r25	; 0x01
 3d8:	88 83       	st	Y, r24
			st[this->len] = (char)(num+(int)'0');
			
			}else{
			int rem = num%10;
			st = itos(num/10,count+1);
			st[this->len] = 	(char)(rem+(int)'0');
 3da:	f9 01       	movw	r30, r18
 3dc:	e8 0f       	add	r30, r24
 3de:	f9 1f       	adc	r31, r25
 3e0:	80 e3       	ldi	r24, 0x30	; 48
 3e2:	8e 0d       	add	r24, r14
 3e4:	80 83       	st	Z, r24
		}
		
		this->len++;
 3e6:	88 81       	ld	r24, Y
 3e8:	99 81       	ldd	r25, Y+1	; 0x01
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	99 83       	std	Y+1, r25	; 0x01
 3ee:	88 83       	st	Y, r24
			st[this->len] = (char)(num+(int)'0');
			
			}else{
			int rem = num%10;
			st = itos(num/10,count+1);
			st[this->len] = 	(char)(rem+(int)'0');
 3f0:	f9 01       	movw	r30, r18
 3f2:	e8 0f       	add	r30, r24
 3f4:	f9 1f       	adc	r31, r25
 3f6:	80 e3       	ldi	r24, 0x30	; 48
 3f8:	8f 0d       	add	r24, r15
 3fa:	80 83       	st	Z, r24
		}
		
		this->len++;
 3fc:	88 81       	ld	r24, Y
 3fe:	99 81       	ldd	r25, Y+1	; 0x01
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	99 83       	std	Y+1, r25	; 0x01
 404:	88 83       	st	Y, r24

		return st;
		
	}
 406:	c9 01       	movw	r24, r18
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	9f 90       	pop	r9
 41e:	08 95       	ret

00000420 <main>:
	
	
};

int main(void)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	2a 97       	sbiw	r28, 0x0a	; 10
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61

class Lcd4bit{
	public:
		int pin;
		Lcd4bit(int p){
			this->pin = p;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	9a 87       	std	Y+10, r25	; 0x0a
 43a:	89 87       	std	Y+9, r24	; 0x09
    /* Replace with your application code */ 
	Lcd4bit lcd(1);
	lcd.lcd4init();
 43c:	ce 01       	movw	r24, r28
 43e:	09 96       	adiw	r24, 0x09	; 9
 440:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Lcd4bit8lcd4initEv>

class Inttostr{
	public:
	int len = 0;
	char* str;
	Inttostr(int num){
 444:	1e 82       	std	Y+6, r1	; 0x06
 446:	1d 82       	std	Y+5, r1	; 0x05
		
		this->str = this->itos(num,1);
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	67 e3       	ldi	r22, 0x37	; 55
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	ce 01       	movw	r24, r28
 452:	05 96       	adiw	r24, 0x05	; 5
 454:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN8Inttostr4itosEii>
 458:	98 87       	std	Y+8, r25	; 0x08
 45a:	8f 83       	std	Y+7, r24	; 0x07
int main(void)
{
    /* Replace with your application code */ 
	Lcd4bit lcd(1);
	lcd.lcd4init();
	lcd.lcd4printlen(Inttostr(55).str,Inttostr(55).len);
 45c:	0d 81       	ldd	r16, Y+5	; 0x05
 45e:	1e 81       	ldd	r17, Y+6	; 0x06

class Inttostr{
	public:
	int len = 0;
	char* str;
	Inttostr(int num){
 460:	1a 82       	std	Y+2, r1	; 0x02
 462:	19 82       	std	Y+1, r1	; 0x01
		
		this->str = this->itos(num,1);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	67 e3       	ldi	r22, 0x37	; 55
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	0e 94 4e 01 	call	0x29c	; 0x29c <_ZN8Inttostr4itosEii>
 474:	9c 83       	std	Y+4, r25	; 0x04
 476:	8b 83       	std	Y+3, r24	; 0x03
		}
		
	}
		void lcd4printlen(char* string, unsigned int length){
		unsigned int i = 0;
		for(i=0;i<length;i++){
 478:	01 15       	cp	r16, r1
 47a:	11 05       	cpc	r17, r1
 47c:	b1 f1       	breq	.+108    	; 0x4ea <main+0xca>
 47e:	fc 01       	movw	r30, r24
 480:	08 0f       	add	r16, r24
 482:	19 1f       	adc	r17, r25
			
			this->lcd4data((int)(string[i]));
 484:	81 91       	ld	r24, Z+
		
		
	}

		void lcd4data(int data){
		LCD_DPRT =  (LCD_DPRT &0x0F)| (data & 0xF0);
 486:	9b b1       	in	r25, 0x0b	; 11
 488:	29 2f       	mov	r18, r25
 48a:	2f 70       	andi	r18, 0x0F	; 15
 48c:	98 2f       	mov	r25, r24
 48e:	90 7f       	andi	r25, 0xF0	; 240
 490:	92 2b       	or	r25, r18
 492:	9b b9       	out	0x0b, r25	; 11
		LCD_CPRT |= (1<<LCD_RS); //RS=1
 494:	42 9a       	sbi	0x08, 2	; 8
		LCD_CPRT &= ~(1<<LCD_RW); //RW=0
 496:	41 98       	cbi	0x08, 1	; 8
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 498:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49a:	32 e0       	ldi	r19, 0x02	; 2
 49c:	3a 95       	dec	r19
 49e:	f1 f7       	brne	.-4      	; 0x49c <main+0x7c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <main+0x82>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN); //EN=0
 4a2:	40 98       	cbi	0x08, 0	; 8
 4a4:	a7 ec       	ldi	r26, 0xC7	; 199
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	11 97       	sbiw	r26, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <main+0x88>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <main+0x8e>
 4ae:	00 00       	nop
		_delay_us(100);
		
		LCD_DPRT = (LCD_DPRT &0x0F)|(data<<4);
 4b0:	2b b1       	in	r18, 0x0b	; 11
 4b2:	2f 70       	andi	r18, 0x0F	; 15
 4b4:	b0 e1       	ldi	r27, 0x10	; 16
 4b6:	8b 9f       	mul	r24, r27
 4b8:	c0 01       	movw	r24, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	82 2b       	or	r24, r18
 4be:	8b b9       	out	0x0b, r24	; 11
		LCD_CPRT |= (1<<LCD_EN); //EN = 1
 4c0:	40 9a       	sbi	0x08, 0	; 8
 4c2:	32 e0       	ldi	r19, 0x02	; 2
 4c4:	3a 95       	dec	r19
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <main+0xa4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0xaa>
		_delay_us(1);
		LCD_CPRT &= ~(1<<LCD_EN); //EN=0
 4ca:	40 98       	cbi	0x08, 0	; 8
 4cc:	87 ec       	ldi	r24, 0xC7	; 199
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <main+0xb0>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0xb6>
 4d6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	af e9       	ldi	r26, 0x9F	; 159
 4da:	bf e0       	ldi	r27, 0x0F	; 15
 4dc:	11 97       	sbiw	r26, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <main+0xbc>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0xc2>
 4e2:	00 00       	nop
		}
		
	}
		void lcd4printlen(char* string, unsigned int length){
		unsigned int i = 0;
		for(i=0;i<length;i++){
 4e4:	e0 17       	cp	r30, r16
 4e6:	f1 07       	cpc	r31, r17
 4e8:	69 f6       	brne	.-102    	; 0x484 <main+0x64>
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <main+0xca>

000004ec <__divmodhi4>:
 4ec:	97 fb       	bst	r25, 7
 4ee:	07 2e       	mov	r0, r23
 4f0:	16 f4       	brtc	.+4      	; 0x4f6 <__divmodhi4+0xa>
 4f2:	00 94       	com	r0
 4f4:	07 d0       	rcall	.+14     	; 0x504 <__divmodhi4_neg1>
 4f6:	77 fd       	sbrc	r23, 7
 4f8:	09 d0       	rcall	.+18     	; 0x50c <__divmodhi4_neg2>
 4fa:	0e 94 8a 02 	call	0x514	; 0x514 <__udivmodhi4>
 4fe:	07 fc       	sbrc	r0, 7
 500:	05 d0       	rcall	.+10     	; 0x50c <__divmodhi4_neg2>
 502:	3e f4       	brtc	.+14     	; 0x512 <__divmodhi4_exit>

00000504 <__divmodhi4_neg1>:
 504:	90 95       	com	r25
 506:	81 95       	neg	r24
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	08 95       	ret

0000050c <__divmodhi4_neg2>:
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255

00000512 <__divmodhi4_exit>:
 512:	08 95       	ret

00000514 <__udivmodhi4>:
 514:	aa 1b       	sub	r26, r26
 516:	bb 1b       	sub	r27, r27
 518:	51 e1       	ldi	r21, 0x11	; 17
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__udivmodhi4_ep>

0000051c <__udivmodhi4_loop>:
 51c:	aa 1f       	adc	r26, r26
 51e:	bb 1f       	adc	r27, r27
 520:	a6 17       	cp	r26, r22
 522:	b7 07       	cpc	r27, r23
 524:	10 f0       	brcs	.+4      	; 0x52a <__udivmodhi4_ep>
 526:	a6 1b       	sub	r26, r22
 528:	b7 0b       	sbc	r27, r23

0000052a <__udivmodhi4_ep>:
 52a:	88 1f       	adc	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	5a 95       	dec	r21
 530:	a9 f7       	brne	.-22     	; 0x51c <__udivmodhi4_loop>
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	bc 01       	movw	r22, r24
 538:	cd 01       	movw	r24, r26
 53a:	08 95       	ret

0000053c <malloc>:
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	91 05       	cpc	r25, r1
 548:	10 f4       	brcc	.+4      	; 0x54e <malloc+0x12>
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 552:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	a0 e0       	ldi	r26, 0x00	; 0
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	30 97       	sbiw	r30, 0x00	; 0
 560:	19 f1       	breq	.+70     	; 0x5a8 <malloc+0x6c>
 562:	40 81       	ld	r20, Z
 564:	51 81       	ldd	r21, Z+1	; 0x01
 566:	02 81       	ldd	r16, Z+2	; 0x02
 568:	13 81       	ldd	r17, Z+3	; 0x03
 56a:	48 17       	cp	r20, r24
 56c:	59 07       	cpc	r21, r25
 56e:	c8 f0       	brcs	.+50     	; 0x5a2 <malloc+0x66>
 570:	84 17       	cp	r24, r20
 572:	95 07       	cpc	r25, r21
 574:	69 f4       	brne	.+26     	; 0x590 <malloc+0x54>
 576:	10 97       	sbiw	r26, 0x00	; 0
 578:	31 f0       	breq	.+12     	; 0x586 <malloc+0x4a>
 57a:	12 96       	adiw	r26, 0x02	; 2
 57c:	0c 93       	st	X, r16
 57e:	12 97       	sbiw	r26, 0x02	; 2
 580:	13 96       	adiw	r26, 0x03	; 3
 582:	1c 93       	st	X, r17
 584:	27 c0       	rjmp	.+78     	; 0x5d4 <malloc+0x98>
 586:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 58a:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 58e:	22 c0       	rjmp	.+68     	; 0x5d4 <malloc+0x98>
 590:	21 15       	cp	r18, r1
 592:	31 05       	cpc	r19, r1
 594:	19 f0       	breq	.+6      	; 0x59c <malloc+0x60>
 596:	42 17       	cp	r20, r18
 598:	53 07       	cpc	r21, r19
 59a:	18 f4       	brcc	.+6      	; 0x5a2 <malloc+0x66>
 59c:	9a 01       	movw	r18, r20
 59e:	bd 01       	movw	r22, r26
 5a0:	ef 01       	movw	r28, r30
 5a2:	df 01       	movw	r26, r30
 5a4:	f8 01       	movw	r30, r16
 5a6:	db cf       	rjmp	.-74     	; 0x55e <malloc+0x22>
 5a8:	21 15       	cp	r18, r1
 5aa:	31 05       	cpc	r19, r1
 5ac:	f9 f0       	breq	.+62     	; 0x5ec <malloc+0xb0>
 5ae:	28 1b       	sub	r18, r24
 5b0:	39 0b       	sbc	r19, r25
 5b2:	24 30       	cpi	r18, 0x04	; 4
 5b4:	31 05       	cpc	r19, r1
 5b6:	80 f4       	brcc	.+32     	; 0x5d8 <malloc+0x9c>
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	9b 81       	ldd	r25, Y+3	; 0x03
 5bc:	61 15       	cp	r22, r1
 5be:	71 05       	cpc	r23, r1
 5c0:	21 f0       	breq	.+8      	; 0x5ca <malloc+0x8e>
 5c2:	fb 01       	movw	r30, r22
 5c4:	93 83       	std	Z+3, r25	; 0x03
 5c6:	82 83       	std	Z+2, r24	; 0x02
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <malloc+0x96>
 5ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 5ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 5d2:	fe 01       	movw	r30, r28
 5d4:	32 96       	adiw	r30, 0x02	; 2
 5d6:	44 c0       	rjmp	.+136    	; 0x660 <malloc+0x124>
 5d8:	fe 01       	movw	r30, r28
 5da:	e2 0f       	add	r30, r18
 5dc:	f3 1f       	adc	r31, r19
 5de:	81 93       	st	Z+, r24
 5e0:	91 93       	st	Z+, r25
 5e2:	22 50       	subi	r18, 0x02	; 2
 5e4:	31 09       	sbc	r19, r1
 5e6:	39 83       	std	Y+1, r19	; 0x01
 5e8:	28 83       	st	Y, r18
 5ea:	3a c0       	rjmp	.+116    	; 0x660 <malloc+0x124>
 5ec:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 5f0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 5f4:	23 2b       	or	r18, r19
 5f6:	41 f4       	brne	.+16     	; 0x608 <malloc+0xcc>
 5f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 600:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 604:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 608:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 60c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 610:	21 15       	cp	r18, r1
 612:	31 05       	cpc	r19, r1
 614:	41 f4       	brne	.+16     	; 0x626 <malloc+0xea>
 616:	2d b7       	in	r18, 0x3d	; 61
 618:	3e b7       	in	r19, 0x3e	; 62
 61a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 61e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 622:	24 1b       	sub	r18, r20
 624:	35 0b       	sbc	r19, r21
 626:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 62a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 62e:	e2 17       	cp	r30, r18
 630:	f3 07       	cpc	r31, r19
 632:	a0 f4       	brcc	.+40     	; 0x65c <malloc+0x120>
 634:	2e 1b       	sub	r18, r30
 636:	3f 0b       	sbc	r19, r31
 638:	28 17       	cp	r18, r24
 63a:	39 07       	cpc	r19, r25
 63c:	78 f0       	brcs	.+30     	; 0x65c <malloc+0x120>
 63e:	ac 01       	movw	r20, r24
 640:	4e 5f       	subi	r20, 0xFE	; 254
 642:	5f 4f       	sbci	r21, 0xFF	; 255
 644:	24 17       	cp	r18, r20
 646:	35 07       	cpc	r19, r21
 648:	48 f0       	brcs	.+18     	; 0x65c <malloc+0x120>
 64a:	4e 0f       	add	r20, r30
 64c:	5f 1f       	adc	r21, r31
 64e:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 652:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 656:	81 93       	st	Z+, r24
 658:	91 93       	st	Z+, r25
 65a:	02 c0       	rjmp	.+4      	; 0x660 <malloc+0x124>
 65c:	e0 e0       	ldi	r30, 0x00	; 0
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	cf 01       	movw	r24, r30
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	08 95       	ret

0000066c <free>:
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	09 f4       	brne	.+2      	; 0x676 <free+0xa>
 674:	81 c0       	rjmp	.+258    	; 0x778 <free+0x10c>
 676:	fc 01       	movw	r30, r24
 678:	32 97       	sbiw	r30, 0x02	; 2
 67a:	13 82       	std	Z+3, r1	; 0x03
 67c:	12 82       	std	Z+2, r1	; 0x02
 67e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 682:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 686:	10 97       	sbiw	r26, 0x00	; 0
 688:	81 f4       	brne	.+32     	; 0x6aa <free+0x3e>
 68a:	20 81       	ld	r18, Z
 68c:	31 81       	ldd	r19, Z+1	; 0x01
 68e:	82 0f       	add	r24, r18
 690:	93 1f       	adc	r25, r19
 692:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 696:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 69a:	28 17       	cp	r18, r24
 69c:	39 07       	cpc	r19, r25
 69e:	51 f5       	brne	.+84     	; 0x6f4 <free+0x88>
 6a0:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 6a4:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 6a8:	67 c0       	rjmp	.+206    	; 0x778 <free+0x10c>
 6aa:	ed 01       	movw	r28, r26
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	ce 17       	cp	r28, r30
 6b2:	df 07       	cpc	r29, r31
 6b4:	40 f4       	brcc	.+16     	; 0x6c6 <free+0x5a>
 6b6:	4a 81       	ldd	r20, Y+2	; 0x02
 6b8:	5b 81       	ldd	r21, Y+3	; 0x03
 6ba:	9e 01       	movw	r18, r28
 6bc:	41 15       	cp	r20, r1
 6be:	51 05       	cpc	r21, r1
 6c0:	f1 f0       	breq	.+60     	; 0x6fe <free+0x92>
 6c2:	ea 01       	movw	r28, r20
 6c4:	f5 cf       	rjmp	.-22     	; 0x6b0 <free+0x44>
 6c6:	d3 83       	std	Z+3, r29	; 0x03
 6c8:	c2 83       	std	Z+2, r28	; 0x02
 6ca:	40 81       	ld	r20, Z
 6cc:	51 81       	ldd	r21, Z+1	; 0x01
 6ce:	84 0f       	add	r24, r20
 6d0:	95 1f       	adc	r25, r21
 6d2:	c8 17       	cp	r28, r24
 6d4:	d9 07       	cpc	r29, r25
 6d6:	59 f4       	brne	.+22     	; 0x6ee <free+0x82>
 6d8:	88 81       	ld	r24, Y
 6da:	99 81       	ldd	r25, Y+1	; 0x01
 6dc:	84 0f       	add	r24, r20
 6de:	95 1f       	adc	r25, r21
 6e0:	02 96       	adiw	r24, 0x02	; 2
 6e2:	91 83       	std	Z+1, r25	; 0x01
 6e4:	80 83       	st	Z, r24
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ea:	93 83       	std	Z+3, r25	; 0x03
 6ec:	82 83       	std	Z+2, r24	; 0x02
 6ee:	21 15       	cp	r18, r1
 6f0:	31 05       	cpc	r19, r1
 6f2:	29 f4       	brne	.+10     	; 0x6fe <free+0x92>
 6f4:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 6f8:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 6fc:	3d c0       	rjmp	.+122    	; 0x778 <free+0x10c>
 6fe:	e9 01       	movw	r28, r18
 700:	fb 83       	std	Y+3, r31	; 0x03
 702:	ea 83       	std	Y+2, r30	; 0x02
 704:	49 91       	ld	r20, Y+
 706:	59 91       	ld	r21, Y+
 708:	c4 0f       	add	r28, r20
 70a:	d5 1f       	adc	r29, r21
 70c:	ec 17       	cp	r30, r28
 70e:	fd 07       	cpc	r31, r29
 710:	61 f4       	brne	.+24     	; 0x72a <free+0xbe>
 712:	80 81       	ld	r24, Z
 714:	91 81       	ldd	r25, Z+1	; 0x01
 716:	84 0f       	add	r24, r20
 718:	95 1f       	adc	r25, r21
 71a:	02 96       	adiw	r24, 0x02	; 2
 71c:	e9 01       	movw	r28, r18
 71e:	99 83       	std	Y+1, r25	; 0x01
 720:	88 83       	st	Y, r24
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	93 81       	ldd	r25, Z+3	; 0x03
 726:	9b 83       	std	Y+3, r25	; 0x03
 728:	8a 83       	std	Y+2, r24	; 0x02
 72a:	e0 e0       	ldi	r30, 0x00	; 0
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	12 96       	adiw	r26, 0x02	; 2
 730:	8d 91       	ld	r24, X+
 732:	9c 91       	ld	r25, X
 734:	13 97       	sbiw	r26, 0x03	; 3
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	19 f0       	breq	.+6      	; 0x740 <free+0xd4>
 73a:	fd 01       	movw	r30, r26
 73c:	dc 01       	movw	r26, r24
 73e:	f7 cf       	rjmp	.-18     	; 0x72e <free+0xc2>
 740:	8d 91       	ld	r24, X+
 742:	9c 91       	ld	r25, X
 744:	11 97       	sbiw	r26, 0x01	; 1
 746:	9d 01       	movw	r18, r26
 748:	2e 5f       	subi	r18, 0xFE	; 254
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	82 0f       	add	r24, r18
 74e:	93 1f       	adc	r25, r19
 750:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 754:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 758:	28 17       	cp	r18, r24
 75a:	39 07       	cpc	r19, r25
 75c:	69 f4       	brne	.+26     	; 0x778 <free+0x10c>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	29 f4       	brne	.+10     	; 0x76c <free+0x100>
 762:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 766:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 76a:	02 c0       	rjmp	.+4      	; 0x770 <free+0x104>
 76c:	13 82       	std	Z+3, r1	; 0x03
 76e:	12 82       	std	Z+2, r1	; 0x02
 770:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 774:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <_exit>:
 77e:	f8 94       	cli

00000780 <__stop_program>:
 780:	ff cf       	rjmp	.-2      	; 0x780 <__stop_program>
