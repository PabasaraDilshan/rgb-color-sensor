
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800118  00800118  0000046a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6f  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fe  00000000  00000000  00001c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b0  00000000  00000000  000028c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  9e:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd4command>:
		case 5:
			
			OCR0B = value;
			break;
		case 3:
			OCR2B = value;
  a6:	48 b1       	in	r20, 0x08	; 8
  a8:	9c 01       	movw	r18, r24
  aa:	20 7f       	andi	r18, 0xF0	; 240
  ac:	33 27       	eor	r19, r19
  ae:	35 95       	asr	r19
  b0:	27 95       	ror	r18
  b2:	35 95       	asr	r19
  b4:	27 95       	ror	r18
  b6:	35 95       	asr	r19
  b8:	27 95       	ror	r18
  ba:	34 2f       	mov	r19, r20
  bc:	31 7e       	andi	r19, 0xE1	; 225
  be:	23 2b       	or	r18, r19
  c0:	28 b9       	out	0x08, r18	; 8
  c2:	58 98       	cbi	0x0b, 0	; 11
  c4:	59 98       	cbi	0x0b, 1	; 11
  c6:	5a 9a       	sbi	0x0b, 2	; 11
  c8:	22 e0       	ldi	r18, 0x02	; 2
  ca:	2a 95       	dec	r18
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd4command+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd4command+0x2a>
  d0:	5a 98       	cbi	0x0b, 2	; 11
  d2:	e7 ec       	ldi	r30, 0xC7	; 199
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd4command+0x30>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd4command+0x36>
  dc:	00 00       	nop
  de:	28 b1       	in	r18, 0x08	; 8
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	8e 71       	andi	r24, 0x1E	; 30
  e6:	92 2f       	mov	r25, r18
  e8:	91 7e       	andi	r25, 0xE1	; 225
  ea:	89 2b       	or	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	5a 9a       	sbi	0x0b, 2	; 11
  f0:	f2 e0       	ldi	r31, 0x02	; 2
  f2:	fa 95       	dec	r31
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd4command+0x4c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd4command+0x52>
  f8:	5a 98       	cbi	0x0b, 2	; 11
  fa:	87 ec       	ldi	r24, 0xC7	; 199
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd4command+0x58>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd4command+0x5e>
 104:	00 00       	nop
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd4command+0x64>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd4command+0x6a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <lcd4init>:
 114:	87 b1       	in	r24, 0x07	; 7
 116:	8e 61       	ori	r24, 0x1E	; 30
 118:	87 b9       	out	0x07, r24	; 7
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	87 60       	ori	r24, 0x07	; 7
 11e:	8a b9       	out	0x0a, r24	; 10
 120:	5a 98       	cbi	0x0b, 2	; 11
 122:	8f e9       	ldi	r24, 0x9F	; 159
 124:	9f e0       	ldi	r25, 0x0F	; 15
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd4init+0x12>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd4init+0x18>
 12c:	00 00       	nop
 12e:	83 e3       	ldi	r24, 0x33	; 51
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 136:	82 e3       	ldi	r24, 0x32	; 50
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 146:	8e e0       	ldi	r24, 0x0E	; 14
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 15e:	08 95       	ret

00000160 <lcd4data>:
 160:	48 b1       	in	r20, 0x08	; 8
 162:	9c 01       	movw	r18, r24
 164:	20 7f       	andi	r18, 0xF0	; 240
 166:	33 27       	eor	r19, r19
 168:	35 95       	asr	r19
 16a:	27 95       	ror	r18
 16c:	35 95       	asr	r19
 16e:	27 95       	ror	r18
 170:	35 95       	asr	r19
 172:	27 95       	ror	r18
 174:	34 2f       	mov	r19, r20
 176:	31 7e       	andi	r19, 0xE1	; 225
 178:	23 2b       	or	r18, r19
 17a:	28 b9       	out	0x08, r18	; 8
 17c:	58 9a       	sbi	0x0b, 0	; 11
 17e:	59 98       	cbi	0x0b, 1	; 11
 180:	5a 9a       	sbi	0x0b, 2	; 11
 182:	22 e0       	ldi	r18, 0x02	; 2
 184:	2a 95       	dec	r18
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd4data+0x24>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd4data+0x2a>
 18a:	5a 98       	cbi	0x0b, 2	; 11
 18c:	e7 ec       	ldi	r30, 0xC7	; 199
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd4data+0x30>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd4data+0x36>
 196:	00 00       	nop
 198:	28 b1       	in	r18, 0x08	; 8
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	8e 71       	andi	r24, 0x1E	; 30
 1a0:	92 2f       	mov	r25, r18
 1a2:	91 7e       	andi	r25, 0xE1	; 225
 1a4:	89 2b       	or	r24, r25
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	5a 9a       	sbi	0x0b, 2	; 11
 1aa:	f2 e0       	ldi	r31, 0x02	; 2
 1ac:	fa 95       	dec	r31
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd4data+0x4c>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd4data+0x52>
 1b2:	5a 98       	cbi	0x0b, 2	; 11
 1b4:	87 ec       	ldi	r24, 0xC7	; 199
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd4data+0x58>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd4data+0x5e>
 1be:	00 00       	nop
 1c0:	ef e9       	ldi	r30, 0x9F	; 159
 1c2:	ff e0       	ldi	r31, 0x0F	; 15
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd4data+0x64>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd4data+0x6a>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <lcd4print>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	88 81       	ld	r24, Y
 1d6:	88 23       	and	r24, r24
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <lcd4print+0x1a>
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b0 00 	call	0x160	; 0x160 <lcd4data>
 1e2:	89 91       	ld	r24, Y+
 1e4:	81 11       	cpse	r24, r1
 1e6:	fa cf       	rjmp	.-12     	; 0x1dc <lcd4print+0xe>
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd4printlen>:
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	61 15       	cp	r22, r1
 1f8:	71 05       	cpc	r23, r1
 1fa:	59 f0       	breq	.+22     	; 0x212 <lcd4printlen+0x24>
 1fc:	8c 01       	movw	r16, r24
 1fe:	ec 01       	movw	r28, r24
 200:	06 0f       	add	r16, r22
 202:	17 1f       	adc	r17, r23
 204:	89 91       	ld	r24, Y+
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 b0 00 	call	0x160	; 0x160 <lcd4data>
 20c:	c0 17       	cp	r28, r16
 20e:	d1 07       	cpc	r29, r17
 210:	c9 f7       	brne	.-14     	; 0x204 <lcd4printlen+0x16>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <gotoNewline>:
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd4command>
 224:	08 95       	ret

00000226 <initkey>:
#define KEY_PIN  PINB
#define KEY_PRT  PORTB
int col,row;
unsigned char keys[4][3] = {'1','2','3','4','5','6','7','8','9','*','0','#'};
void initkey(){
	KEY_DDR = 0x0F;
 226:	8f e0       	ldi	r24, 0x0F	; 15
 228:	84 b9       	out	0x04, r24	; 4
	KEY_PRT = 0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	85 b9       	out	0x05, r24	; 5
 22e:	08 95       	ret

00000230 <waitforkey>:
char waitforkey(){
	

	do 
	{
		KEY_PRT &= 0x70;
 230:	85 b1       	in	r24, 0x05	; 5
 232:	80 77       	andi	r24, 0x70	; 112
 234:	85 b9       	out	0x05, r24	; 5
		col = (KEY_PIN & 0x70 );
 236:	83 b1       	in	r24, 0x03	; 3
 238:	80 77       	andi	r24, 0x70	; 112
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 240:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		
	} while (col!=0x70);
 244:	80 37       	cpi	r24, 0x70	; 112
 246:	91 05       	cpc	r25, r1
 248:	99 f7       	brne	.-26     	; 0x230 <waitforkey>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8f e3       	ldi	r24, 0x3F	; 63
 24c:	9c e9       	ldi	r25, 0x9C	; 156
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <waitforkey+0x1e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <waitforkey+0x24>
 254:	00 00       	nop
	do 
	{
		do 
		{
			_delay_ms(20);
			col = (KEY_PIN & 0x70 );
 256:	83 b1       	in	r24, 0x03	; 3
 258:	80 77       	andi	r24, 0x70	; 112
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 260:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		} while (col == 0x70);
 264:	80 37       	cpi	r24, 0x70	; 112
 266:	91 05       	cpc	r25, r1
 268:	81 f3       	breq	.-32     	; 0x24a <waitforkey+0x1a>
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9c e9       	ldi	r25, 0x9C	; 156
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <waitforkey+0x3e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <waitforkey+0x44>
 274:	00 00       	nop
		_delay_ms(20);
		col = (KEY_PIN & 0x70 );
 276:	83 b1       	in	r24, 0x03	; 3
 278:	80 77       	andi	r24, 0x70	; 112
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 280:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	} while (col==0x70);
 284:	80 37       	cpi	r24, 0x70	; 112
 286:	91 05       	cpc	r25, r1
 288:	01 f3       	breq	.-64     	; 0x24a <waitforkey+0x1a>

	while(1){
		KEY_PRT = 0xFE;
 28a:	2e ef       	ldi	r18, 0xFE	; 254
		col = (KEY_PIN & 0x70 );
		if(col!=0x70){
			row = 0;
			break;
		}
		KEY_PRT = 0x7D;
 28c:	3d e7       	ldi	r19, 0x7D	; 125
		col = (KEY_PIN & 0x70 );
		if(col!=0x70){
			row = 1;
			break;
		}
		KEY_PRT = 0x7B;
 28e:	4b e7       	ldi	r20, 0x7B	; 123
		col = (KEY_PIN & 0x70 );
		if(col!=0x70){
			row = 2;
			break;
		}
		KEY_PRT = 0x77;
 290:	57 e7       	ldi	r21, 0x77	; 119
		_delay_ms(20);
		col = (KEY_PIN & 0x70 );
	} while (col==0x70);

	while(1){
		KEY_PRT = 0xFE;
 292:	25 b9       	out	0x05, r18	; 5
		col = (KEY_PIN & 0x70 );
 294:	83 b1       	in	r24, 0x03	; 3
 296:	80 77       	andi	r24, 0x70	; 112
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 29e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		if(col!=0x70){
 2a2:	80 37       	cpi	r24, 0x70	; 112
 2a4:	91 05       	cpc	r25, r1
 2a6:	29 f0       	breq	.+10     	; 0x2b2 <waitforkey+0x82>
			row = 0;
 2a8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <row+0x1>
 2ac:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <row>
			break;
 2b0:	35 c0       	rjmp	.+106    	; 0x31c <waitforkey+0xec>
		}
		KEY_PRT = 0x7D;
 2b2:	35 b9       	out	0x05, r19	; 5
		col = (KEY_PIN & 0x70 );
 2b4:	83 b1       	in	r24, 0x03	; 3
 2b6:	80 77       	andi	r24, 0x70	; 112
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 2be:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		if(col!=0x70){
 2c2:	80 37       	cpi	r24, 0x70	; 112
 2c4:	91 05       	cpc	r25, r1
 2c6:	39 f0       	breq	.+14     	; 0x2d6 <waitforkey+0xa6>
			row = 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <row+0x1>
 2d0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <row>
			break;
 2d4:	23 c0       	rjmp	.+70     	; 0x31c <waitforkey+0xec>
		}
		KEY_PRT = 0x7B;
 2d6:	45 b9       	out	0x05, r20	; 5
		col = (KEY_PIN & 0x70 );
 2d8:	83 b1       	in	r24, 0x03	; 3
 2da:	80 77       	andi	r24, 0x70	; 112
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 2e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		if(col!=0x70){
 2e6:	80 37       	cpi	r24, 0x70	; 112
 2e8:	91 05       	cpc	r25, r1
 2ea:	39 f0       	breq	.+14     	; 0x2fa <waitforkey+0xca>
			row = 2;
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <row+0x1>
 2f4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <row>
			break;
 2f8:	11 c0       	rjmp	.+34     	; 0x31c <waitforkey+0xec>
		}
		KEY_PRT = 0x77;
 2fa:	55 b9       	out	0x05, r21	; 5
		col = (KEY_PIN & 0x70 );
 2fc:	83 b1       	in	r24, 0x03	; 3
 2fe:	80 77       	andi	r24, 0x70	; 112
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 306:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		if(col!=0x70){
 30a:	80 37       	cpi	r24, 0x70	; 112
 30c:	91 05       	cpc	r25, r1
 30e:	09 f2       	breq	.-126    	; 0x292 <waitforkey+0x62>
			row = 3;
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <row+0x1>
 318:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <row>
			break;
		}
	}
	KEY_PRT = 0x7F;
 31c:	8f e7       	ldi	r24, 0x7F	; 127
 31e:	85 b9       	out	0x05, r24	; 5
	if(col==0x60){
 320:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 324:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 328:	80 36       	cpi	r24, 0x60	; 96
 32a:	91 05       	cpc	r25, r1
 32c:	71 f4       	brne	.+28     	; 0x34a <waitforkey+0x11a>
		return keys[row][0];
 32e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <row>
 332:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <row+0x1>
 336:	fc 01       	movw	r30, r24
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	8e 0f       	add	r24, r30
 33e:	9f 1f       	adc	r25, r31
 340:	fc 01       	movw	r30, r24
 342:	e0 50       	subi	r30, 0x00	; 0
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	80 81       	ld	r24, Z
 348:	08 95       	ret
	}
	if(col==0x50){
 34a:	80 35       	cpi	r24, 0x50	; 80
 34c:	91 05       	cpc	r25, r1
 34e:	71 f4       	brne	.+28     	; 0x36c <waitforkey+0x13c>
		return keys[row][1];
 350:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <row>
 354:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <row+0x1>
 358:	fc 01       	movw	r30, r24
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	8e 0f       	add	r24, r30
 360:	9f 1f       	adc	r25, r31
 362:	fc 01       	movw	r30, r24
 364:	e0 50       	subi	r30, 0x00	; 0
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	81 81       	ldd	r24, Z+1	; 0x01
 36a:	08 95       	ret
	}
	
	return keys[row][2];
 36c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <row>
 370:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <row+0x1>
 374:	fc 01       	movw	r30, r24
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	8e 0f       	add	r24, r30
 37c:	9f 1f       	adc	r25, r31
 37e:	fc 01       	movw	r30, r24
 380:	e0 50       	subi	r30, 0x00	; 0
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	82 81       	ldd	r24, Z+2	; 0x02
	
	
}
 386:	08 95       	ret

00000388 <main>:
#include <tools.h>
#include <pwm.h>
#include <keypad.h>


int main(){
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	1f 92       	push	r1
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
	lcd4init();
 392:	0e 94 8a 00 	call	0x114	; 0x114 <lcd4init>
	initkey();
 396:	0e 94 13 01 	call	0x226	; 0x226 <initkey>
	//initPwm(6);
	//initPwm(5);
	//initPwm(3);
	lcd4print("Press 1 ADC");
 39a:	8c e0       	ldi	r24, 0x0C	; 12
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd4print>
	gotoNewline();
 3a2:	0e 94 0e 01 	call	0x21c	; 0x21c <gotoNewline>
	while(1){
		char c = waitforkey();
 3a6:	0e 94 18 01 	call	0x230	; 0x230 <waitforkey>
		char cr[1];
		cr[0] = c;
 3aa:	89 83       	std	Y+1, r24	; 0x01
		lcd4printlen(cr,1);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	ce 01       	movw	r24, r28
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4printlen>
 3b8:	f6 cf       	rjmp	.-20     	; 0x3a6 <main+0x1e>

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
