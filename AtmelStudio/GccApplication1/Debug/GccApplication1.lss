
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000392  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000438  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6e  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007af  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000561  00000000  00000000  00002366  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000028c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  9e:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initkey>:
#define KEY_PIN  PINB
#define KEY_PRT  PORTB
int col,row;
unsigned char keys[4][3] = {'1','2','3','4','5','6','7','8','9','*','0','#'};
void initkey(){
	KEY_DDR = 0x0F;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 b9       	out	0x04, r24	; 4
	KEY_PRT = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	08 95       	ret

000000b0 <waitforkey>:
}
char waitforkey(){
	
	KEY_PRT &= 0xF0;
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	85 b9       	out	0x05, r24	; 5
	col = (KEY_PIN & 0xF0 );
  b6:	83 b1       	in	r24, 0x03	; 3
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
  c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	while(col==0xF0){
  c4:	80 3f       	cpi	r24, 0xF0	; 240
  c6:	91 05       	cpc	r25, r1
  c8:	51 f4       	brne	.+20     	; 0xde <waitforkey+0x2e>
		col = (KEY_PIN & 0xF0 );
  ca:	83 b1       	in	r24, 0x03	; 3
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
  d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
char waitforkey(){
	
	KEY_PRT &= 0xF0;
	col = (KEY_PIN & 0xF0 );
	while(col==0xF0){
  d8:	80 3f       	cpi	r24, 0xF0	; 240
  da:	91 05       	cpc	r25, r1
  dc:	b1 f3       	breq	.-20     	; 0xca <waitforkey+0x1a>
		col = (KEY_PIN & 0xF0 );
	}

	while(1){
		KEY_PRT = 0xFE;
  de:	2e ef       	ldi	r18, 0xFE	; 254
		col = (KEY_PIN & 0xF0 );
		if(col!=0xF0){
			row = 0;
			break;
		}
		KEY_PRT = 0xFD;
  e0:	3d ef       	ldi	r19, 0xFD	; 253
		col = (KEY_PIN & 0xF0 );
		if(col!=0xF0){
			row = 1;
			break;
		}
		KEY_PRT = 0xFB;
  e2:	4b ef       	ldi	r20, 0xFB	; 251
		col = (KEY_PIN & 0xF0 );
		if(col!=0xF0){
			row = 2;
			break;
		}
		KEY_PRT = 0xF7;
  e4:	57 ef       	ldi	r21, 0xF7	; 247
	while(col==0xF0){
		col = (KEY_PIN & 0xF0 );
	}

	while(1){
		KEY_PRT = 0xFE;
  e6:	25 b9       	out	0x05, r18	; 5
		col = (KEY_PIN & 0xF0 );
  e8:	83 b1       	in	r24, 0x03	; 3
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
  f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(col!=0xF0){
  f6:	80 3f       	cpi	r24, 0xF0	; 240
  f8:	91 05       	cpc	r25, r1
  fa:	29 f0       	breq	.+10     	; 0x106 <waitforkey+0x56>
			row = 0;
  fc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <row+0x1>
 100:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <row>
			break;
 104:	35 c0       	rjmp	.+106    	; 0x170 <waitforkey+0xc0>
		}
		KEY_PRT = 0xFD;
 106:	35 b9       	out	0x05, r19	; 5
		col = (KEY_PIN & 0xF0 );
 108:	83 b1       	in	r24, 0x03	; 3
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 112:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(col!=0xF0){
 116:	80 3f       	cpi	r24, 0xF0	; 240
 118:	91 05       	cpc	r25, r1
 11a:	39 f0       	breq	.+14     	; 0x12a <waitforkey+0x7a>
			row = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <row+0x1>
 124:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <row>
			break;
 128:	23 c0       	rjmp	.+70     	; 0x170 <waitforkey+0xc0>
		}
		KEY_PRT = 0xFB;
 12a:	45 b9       	out	0x05, r20	; 5
		col = (KEY_PIN & 0xF0 );
 12c:	83 b1       	in	r24, 0x03	; 3
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 136:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(col!=0xF0){
 13a:	80 3f       	cpi	r24, 0xF0	; 240
 13c:	91 05       	cpc	r25, r1
 13e:	39 f0       	breq	.+14     	; 0x14e <waitforkey+0x9e>
			row = 2;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <row+0x1>
 148:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <row>
			break;
 14c:	11 c0       	rjmp	.+34     	; 0x170 <waitforkey+0xc0>
		}
		KEY_PRT = 0xF7;
 14e:	55 b9       	out	0x05, r21	; 5
		col = (KEY_PIN & 0xF0 );
 150:	83 b1       	in	r24, 0x03	; 3
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 15a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(col!=0xF0){
 15e:	80 3f       	cpi	r24, 0xF0	; 240
 160:	91 05       	cpc	r25, r1
 162:	09 f2       	breq	.-126    	; 0xe6 <waitforkey+0x36>
			row = 3;
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <row+0x1>
 16c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <row>
			break;
		}
	}
	KEY_PRT = 0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <waitforkey+0xca>
 182:	00 c0       	rjmp	.+0      	; 0x184 <waitforkey+0xd4>
 184:	00 00       	nop
	_delay_ms(20);
	if(col==0xE0){
 186:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 18a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 18e:	80 3e       	cpi	r24, 0xE0	; 224
 190:	91 05       	cpc	r25, r1
 192:	71 f4       	brne	.+28     	; 0x1b0 <waitforkey+0x100>
		return keys[row][0];
 194:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <row>
 198:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <row+0x1>
 19c:	fc 01       	movw	r30, r24
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	8e 0f       	add	r24, r30
 1a4:	9f 1f       	adc	r25, r31
 1a6:	fc 01       	movw	r30, r24
 1a8:	e0 50       	subi	r30, 0x00	; 0
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	08 95       	ret
	}
	if(col==0xD0){
 1b0:	80 3d       	cpi	r24, 0xD0	; 208
 1b2:	91 05       	cpc	r25, r1
 1b4:	71 f4       	brne	.+28     	; 0x1d2 <waitforkey+0x122>
		return keys[row][1];
 1b6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <row>
 1ba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <row+0x1>
 1be:	fc 01       	movw	r30, r24
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	8e 0f       	add	r24, r30
 1c6:	9f 1f       	adc	r25, r31
 1c8:	fc 01       	movw	r30, r24
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	08 95       	ret
	}
	
	return keys[row][2];
 1d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <row>
 1d6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <row+0x1>
 1da:	fc 01       	movw	r30, r24
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	8e 0f       	add	r24, r30
 1e2:	9f 1f       	adc	r25, r31
 1e4:	fc 01       	movw	r30, r24
 1e6:	e0 50       	subi	r30, 0x00	; 0
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
	
	
}
 1ec:	08 95       	ret

000001ee <lcd4command>:
	
	lcd4command(0x06);//shift cursor to right
	
}
void lcd4command(int data){
	LCD_DPRT = (LCD_DPRT &0x0F)| (data & 0xF0);
 1ee:	2b b1       	in	r18, 0x0b	; 11
 1f0:	2f 70       	andi	r18, 0x0F	; 15
 1f2:	38 2f       	mov	r19, r24
 1f4:	30 7f       	andi	r19, 0xF0	; 240
 1f6:	23 2b       	or	r18, r19
 1f8:	2b b9       	out	0x0b, r18	; 11
	LCD_CPRT &= ~(1<<LCD_RS); //RS=0
 1fa:	42 98       	cbi	0x08, 2	; 8
	LCD_CPRT &= ~(1<<LCD_RW); //RW = 0
 1fc:	41 98       	cbi	0x08, 1	; 8
	LCD_CPRT |= (1<<LCD_EN); //EN = 1
 1fe:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	25 e0       	ldi	r18, 0x05	; 5
 202:	2a 95       	dec	r18
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd4command+0x14>
 206:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN);
 208:	40 98       	cbi	0x08, 0	; 8
 20a:	ef e8       	ldi	r30, 0x8F	; 143
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd4command+0x20>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd4command+0x26>
 214:	00 00       	nop
	_delay_us(100);
	LCD_DPRT =  (LCD_DPRT &0x0F)|(data<<4);
 216:	2b b1       	in	r18, 0x0b	; 11
 218:	2f 70       	andi	r18, 0x0F	; 15
 21a:	82 95       	swap	r24
 21c:	92 95       	swap	r25
 21e:	90 7f       	andi	r25, 0xF0	; 240
 220:	98 27       	eor	r25, r24
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	98 27       	eor	r25, r24
 226:	82 2b       	or	r24, r18
 228:	8b b9       	out	0x0b, r24	; 11

	LCD_CPRT |= (1<<LCD_EN); //EN = 1
 22a:	40 9a       	sbi	0x08, 0	; 8
 22c:	f5 e0       	ldi	r31, 0x05	; 5
 22e:	fa 95       	dec	r31
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd4command+0x40>
 232:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN);
 234:	40 98       	cbi	0x08, 0	; 8
 236:	8f e8       	ldi	r24, 0x8F	; 143
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd4command+0x4c>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd4command+0x52>
 240:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	ef e3       	ldi	r30, 0x3F	; 63
 244:	ff e1       	ldi	r31, 0x1F	; 31
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd4command+0x58>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd4command+0x5e>
 24c:	00 00       	nop
 24e:	08 95       	ret

00000250 <lcd4init>:



void lcd4init(){
	
	LCD_DDDR |= 0xF0; //PORTD as Output
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 6f       	ori	r24, 0xF0	; 240
 254:	8a b9       	out	0x0a, r24	; 10
	LCD_CDDR |= 0x07; //PORTC as Output
 256:	87 b1       	in	r24, 0x07	; 7
 258:	87 60       	ori	r24, 0x07	; 7
 25a:	87 b9       	out	0x07, r24	; 7
	
	
	LCD_CPRT &= ~(1<<LCD_EN);//EN =0
 25c:	40 98       	cbi	0x08, 0	; 8
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	9f e1       	ldi	r25, 0x1F	; 31
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd4init+0x12>
 266:	00 c0       	rjmp	.+0      	; 0x268 <lcd4init+0x18>
 268:	00 00       	nop
	_delay_ms(2);
	lcd4command(0x33);//init lcd with 4bit
 26a:	83 e3       	ldi	r24, 0x33	; 51
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
	lcd4command(0x32);//init lcd with 4bit
 272:	82 e3       	ldi	r24, 0x32	; 50
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
	lcd4command(0x28);//init lcd with 4bit
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
	lcd4command(0x0E);//display on, cursor on
 282:	8e e0       	ldi	r24, 0x0E	; 14
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
	lcd4command(0x01);//clear display
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
	
	
	lcd4command(0x06);//shift cursor to right
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
 29a:	08 95       	ret

0000029c <lcd4data>:
	
	
}

void lcd4data(int data){
	LCD_DPRT =  (LCD_DPRT &0x0F)| (data & 0xF0);
 29c:	2b b1       	in	r18, 0x0b	; 11
 29e:	2f 70       	andi	r18, 0x0F	; 15
 2a0:	38 2f       	mov	r19, r24
 2a2:	30 7f       	andi	r19, 0xF0	; 240
 2a4:	23 2b       	or	r18, r19
 2a6:	2b b9       	out	0x0b, r18	; 11
	LCD_CPRT |= (1<<LCD_RS); //RS=1
 2a8:	42 9a       	sbi	0x08, 2	; 8
	LCD_CPRT &= ~(1<<LCD_RW); //RW=0
 2aa:	41 98       	cbi	0x08, 1	; 8
	LCD_CPRT |= (1<<LCD_EN); //EN = 1
 2ac:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	25 e0       	ldi	r18, 0x05	; 5
 2b0:	2a 95       	dec	r18
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd4data+0x14>
 2b4:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN); //EN=0
 2b6:	40 98       	cbi	0x08, 0	; 8
 2b8:	ef e8       	ldi	r30, 0x8F	; 143
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd4data+0x20>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd4data+0x26>
 2c2:	00 00       	nop
	_delay_us(100);
	
	LCD_DPRT = (LCD_DPRT &0x0F)|(data<<4);
 2c4:	2b b1       	in	r18, 0x0b	; 11
 2c6:	2f 70       	andi	r18, 0x0F	; 15
 2c8:	82 95       	swap	r24
 2ca:	92 95       	swap	r25
 2cc:	90 7f       	andi	r25, 0xF0	; 240
 2ce:	98 27       	eor	r25, r24
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	98 27       	eor	r25, r24
 2d4:	82 2b       	or	r24, r18
 2d6:	8b b9       	out	0x0b, r24	; 11
	LCD_CPRT |= (1<<LCD_EN); //EN = 1
 2d8:	40 9a       	sbi	0x08, 0	; 8
 2da:	f5 e0       	ldi	r31, 0x05	; 5
 2dc:	fa 95       	dec	r31
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd4data+0x40>
 2e0:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~(1<<LCD_EN); //EN=0
 2e2:	40 98       	cbi	0x08, 0	; 8
 2e4:	8f e8       	ldi	r24, 0x8F	; 143
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd4data+0x4c>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd4data+0x52>
 2ee:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	ef e3       	ldi	r30, 0x3F	; 63
 2f2:	ff e1       	ldi	r31, 0x1F	; 31
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd4data+0x58>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd4data+0x5e>
 2fa:	00 00       	nop
 2fc:	08 95       	ret

000002fe <lcd4print>:
	_delay_us(100);
	_delay_ms(2);
}
void lcd4print(char* string){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	unsigned int i = 0;
	while(string[i]!=0){
 304:	88 81       	ld	r24, Y
 306:	88 23       	and	r24, r24
 308:	39 f0       	breq	.+14     	; 0x318 <lcd4print+0x1a>
 30a:	21 96       	adiw	r28, 0x01	; 1
		
		lcd4data((int)(string[i]));
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd4data>
	_delay_us(100);
	_delay_ms(2);
}
void lcd4print(char* string){
	unsigned int i = 0;
	while(string[i]!=0){
 312:	89 91       	ld	r24, Y+
 314:	81 11       	cpse	r24, r1
 316:	fa cf       	rjmp	.-12     	; 0x30c <lcd4print+0xe>
		
		lcd4data((int)(string[i]));
		i++;
	}
	
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <lcd4printlen>:
void lcd4printlen(char* string, int length){
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	unsigned int i = 0;
	for(i=0;i<length;i++){
 326:	61 15       	cp	r22, r1
 328:	71 05       	cpc	r23, r1
 32a:	59 f0       	breq	.+22     	; 0x342 <lcd4printlen+0x24>
 32c:	8c 01       	movw	r16, r24
 32e:	ec 01       	movw	r28, r24
 330:	06 0f       	add	r16, r22
 332:	17 1f       	adc	r17, r23
		
		lcd4data((int)(string[i]));
 334:	89 91       	ld	r24, Y+
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd4data>
	}
	
}
void lcd4printlen(char* string, int length){
	unsigned int i = 0;
	for(i=0;i<length;i++){
 33c:	c0 17       	cp	r28, r16
 33e:	d1 07       	cpc	r29, r17
 340:	c9 f7       	brne	.-14     	; 0x334 <lcd4printlen+0x16>
		
		lcd4data((int)(string[i]));

	}
	
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <lcd4clr>:
void lcd4clr(){
	lcd4command(0x01);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd4command>
 354:	08 95       	ret

00000356 <main>:
#include <keypad.h>
#include <lcd4bit.h>


int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
	lcd4init();
 360:	0e 94 28 01 	call	0x250	; 0x250 <lcd4init>

	initkey();
 364:	0e 94 53 00 	call	0xa6	; 0xa6 <initkey>
	
	
    /* Replace with your application code */
    while (1) 
    {
		lcd4print("Test ");
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd4print>
 
		while(1){
			char c = waitforkey();
 370:	0e 94 58 00 	call	0xb0	; 0xb0 <waitforkey>
 374:	89 83       	std	Y+1, r24	; 0x01
			lcd4printlen(&c,1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	ce 01       	movw	r24, r28
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd4printlen>
			if(c=='#'){
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	83 32       	cpi	r24, 0x23	; 35
 386:	a1 f7       	brne	.-24     	; 0x370 <main+0x1a>
				break;
			}
		}
		lcd4clr();
 388:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd4clr>
    }
 38c:	ed cf       	rjmp	.-38     	; 0x368 <main+0x12>

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
