
Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000036e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080010c  0080010c  0000040e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000993  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000736  00000000  00000000  00000e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000449  00000000  00000000  00001589  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  00001ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  9e:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <command>:
char keys[4][3] = {{'1','2','3'}, {'4','5','6'},{'7','8','9'},{'*','0','#'}};
void search();
void input(char c);
void command (unsigned char cmd)
{
	PORTC = 0X02;
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	98 b9       	out	0x08, r25	; 8
	PORTD = cmd;
  aa:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0X00;
  ac:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e5       	ldi	r24, 0x5F	; 95
  b0:	9a ee       	ldi	r25, 0xEA	; 234
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <command+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <command+0x12>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <lcd_data>:
	_delay_ms(15);
}
void lcd_data(unsigned char data)
{
	PORTC = 0X03;
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	98 b9       	out	0x08, r25	; 8
	PORTD = data;
  c0:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0X01;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	8f e5       	ldi	r24, 0x5F	; 95
  c8:	9a ee       	ldi	r25, 0xEA	; 234
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_data+0xe>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_data+0x14>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <lcd_print>:
	_delay_ms(15);
}
void lcd_print(char *p)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*p)
  da:	88 81       	ld	r24, Y
  dc:	88 23       	and	r24, r24
  de:	31 f0       	breq	.+12     	; 0xec <lcd_print+0x18>
  e0:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_data(*p++);
  e2:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_data>
	PORTC = 0X01;
	_delay_ms(15);
}
void lcd_print(char *p)
{
	while(*p)
  e6:	89 91       	ld	r24, Y+
  e8:	81 11       	cpse	r24, r1
  ea:	fb cf       	rjmp	.-10     	; 0xe2 <lcd_print+0xe>
	{
		lcd_data(*p++);
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <search>:
}


void search()
{
	x= x & 0x0F;
  f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <x>
  f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <x+0x1>
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	99 27       	eor	r25, r25
  fe:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <x+0x1>
 102:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x>
	if(x==0x0E){
 106:	0e 97       	sbiw	r24, 0x0e	; 14
 108:	19 f5       	brne	.+70     	; 0x150 <search+0x5e>
	key = keys[0][r1];
 10a:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <r1>
 10e:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <r1+0x1>
 112:	e0 50       	subi	r30, 0x00	; 0
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <key>
	rgb[rgb[9]] = (int)key;
 11c:	ac e0       	ldi	r26, 0x0C	; 12
 11e:	b1 e0       	ldi	r27, 0x01	; 1
 120:	52 96       	adiw	r26, 0x12	; 18
 122:	ed 91       	ld	r30, X+
 124:	fc 91       	ld	r31, X
 126:	53 97       	sbiw	r26, 0x13	; 19
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e4 5f       	subi	r30, 0xF4	; 244
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
	rgb[9]++;
 136:	52 96       	adiw	r26, 0x12	; 18
 138:	8d 91       	ld	r24, X+
 13a:	9c 91       	ld	r25, X
 13c:	53 97       	sbiw	r26, 0x13	; 19
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	53 96       	adiw	r26, 0x13	; 19
 142:	9c 93       	st	X, r25
 144:	8e 93       	st	-X, r24
 146:	52 97       	sbiw	r26, 0x12	; 18
	lcd_print(&key);
 148:	84 e2       	ldi	r24, 0x24	; 36
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_print>
	
	}
	
	if(x==0x0D)
 150:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <x>
 154:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <x+0x1>
 158:	0d 97       	sbiw	r24, 0x0d	; 13
 15a:	19 f5       	brne	.+70     	; 0x1a2 <search+0xb0>
		{
			
			key = keys[1][r1];
 15c:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <r1>
 160:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <r1+0x1>
 164:	e0 50       	subi	r30, 0x00	; 0
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	83 81       	ldd	r24, Z+3	; 0x03
 16a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <key>
			rgb[rgb[9]] = (int)key;
 16e:	ac e0       	ldi	r26, 0x0C	; 12
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	52 96       	adiw	r26, 0x12	; 18
 174:	ed 91       	ld	r30, X+
 176:	fc 91       	ld	r31, X
 178:	53 97       	sbiw	r26, 0x13	; 19
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e4 5f       	subi	r30, 0xF4	; 244
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
			rgb[9]++;
 188:	52 96       	adiw	r26, 0x12	; 18
 18a:	8d 91       	ld	r24, X+
 18c:	9c 91       	ld	r25, X
 18e:	53 97       	sbiw	r26, 0x13	; 19
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	53 96       	adiw	r26, 0x13	; 19
 194:	9c 93       	st	X, r25
 196:	8e 93       	st	-X, r24
 198:	52 97       	sbiw	r26, 0x12	; 18
			lcd_print(&key);
 19a:	84 e2       	ldi	r24, 0x24	; 36
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_print>
		}
	
	if(x==0x0B)
 1a2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <x>
 1a6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <x+0x1>
 1aa:	0b 97       	sbiw	r24, 0x0b	; 11
 1ac:	19 f5       	brne	.+70     	; 0x1f4 <search+0x102>
		{
			key = keys[2][r1];
 1ae:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <r1>
 1b2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <r1+0x1>
 1b6:	e0 50       	subi	r30, 0x00	; 0
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	86 81       	ldd	r24, Z+6	; 0x06
 1bc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <key>
			rgb[rgb[9]] = (int)key;
 1c0:	ac e0       	ldi	r26, 0x0C	; 12
 1c2:	b1 e0       	ldi	r27, 0x01	; 1
 1c4:	52 96       	adiw	r26, 0x12	; 18
 1c6:	ed 91       	ld	r30, X+
 1c8:	fc 91       	ld	r31, X
 1ca:	53 97       	sbiw	r26, 0x13	; 19
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e4 5f       	subi	r30, 0xF4	; 244
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	91 83       	std	Z+1, r25	; 0x01
 1d8:	80 83       	st	Z, r24
			rgb[9]++;
 1da:	52 96       	adiw	r26, 0x12	; 18
 1dc:	8d 91       	ld	r24, X+
 1de:	9c 91       	ld	r25, X
 1e0:	53 97       	sbiw	r26, 0x13	; 19
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	53 96       	adiw	r26, 0x13	; 19
 1e6:	9c 93       	st	X, r25
 1e8:	8e 93       	st	-X, r24
 1ea:	52 97       	sbiw	r26, 0x12	; 18
			lcd_print(&key);
 1ec:	84 e2       	ldi	r24, 0x24	; 36
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_print>
		}
	
	if(x==0x07)
 1f4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <x>
 1f8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <x+0x1>
 1fc:	07 97       	sbiw	r24, 0x07	; 7
 1fe:	69 f5       	brne	.+90     	; 0x25a <search+0x168>
		{
			key = keys[3][r1];
 200:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <r1>
 204:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <r1+0x1>
 208:	e0 50       	subi	r30, 0x00	; 0
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	81 85       	ldd	r24, Z+9	; 0x09
 20e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <key>
			
			if(key=='#'){
 212:	83 32       	cpi	r24, 0x23	; 35
 214:	41 f4       	brne	.+16     	; 0x226 <search+0x134>
				command(0X01);//Clearing the display.
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
				rgb[9] = 0;
 21c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x13>
 220:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end+0x12>
 224:	08 95       	ret
				
				}else{
					rgb[rgb[9]] = (int)key;
 226:	ac e0       	ldi	r26, 0x0C	; 12
 228:	b1 e0       	ldi	r27, 0x01	; 1
 22a:	52 96       	adiw	r26, 0x12	; 18
 22c:	ed 91       	ld	r30, X+
 22e:	fc 91       	ld	r31, X
 230:	53 97       	sbiw	r26, 0x13	; 19
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e4 5f       	subi	r30, 0xF4	; 244
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	80 83       	st	Z, r24
					rgb[9]++;
 240:	52 96       	adiw	r26, 0x12	; 18
 242:	8d 91       	ld	r24, X+
 244:	9c 91       	ld	r25, X
 246:	53 97       	sbiw	r26, 0x13	; 19
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	53 96       	adiw	r26, 0x13	; 19
 24c:	9c 93       	st	X, r25
 24e:	8e 93       	st	-X, r24
 250:	52 97       	sbiw	r26, 0x12	; 18
				lcd_print(&key);
 252:	84 e2       	ldi	r24, 0x24	; 36
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_print>
 25a:	08 95       	ret

0000025c <main>:
		lcd_data(*p++);
	}
}
int main(void)
{
	DDRB = 0XF0;
 25c:	80 ef       	ldi	r24, 0xF0	; 240
 25e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0X0F;
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	85 b9       	out	0x05, r24	; 5
	DDRC=0XFF;//This register is used for selecting the R/S and R/W pin.
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	87 b9       	out	0x07, r24	; 7
	DDRD=0XFF;//This register is used to give the data or commands.
 268:	8a b9       	out	0x0a, r24	; 10
	command(0x38);//Activated 2 lines in 8-bit mode.
 26a:	88 e3       	ldi	r24, 0x38	; 56
 26c:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	command(0X0F);//Display is ON, cursor is blinking.
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	command(0x01);//Clearing the display.
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	command(0X80);//Forced the cursor to first position of first line.
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
	
	
	
	while(1)
	{
		if(rgb[9]!=9){
 282:	cc e0       	ldi	r28, 0x0C	; 12
 284:	d1 e0       	ldi	r29, 0x01	; 1
					break;
				}
				
			}
			
			PORTB=0xEF;
 286:	0f 2e       	mov	r0, r31
 288:	ff ee       	ldi	r31, 0xEF	; 239
 28a:	8f 2e       	mov	r8, r31
 28c:	f0 2d       	mov	r31, r0
			if(x!=0XEF)
			{
				r1=0;
				search();
			}
			PORTB=0xDF;
 28e:	0f 2e       	mov	r0, r31
 290:	ff ed       	ldi	r31, 0xDF	; 223
 292:	9f 2e       	mov	r9, r31
 294:	f0 2d       	mov	r31, r0
			if(x!=0XDF)
			{
				r1=1;
				search();
			}
			PORTB=0xBF;
 296:	0f 2e       	mov	r0, r31
 298:	ff eb       	ldi	r31, 0xBF	; 191
 29a:	af 2e       	mov	r10, r31
 29c:	f0 2d       	mov	r31, r0
			if(x!=0XBF)
			{
				r1=2;
				search();
			}
			PORTB=0x7F;
 29e:	0f 2e       	mov	r0, r31
 2a0:	ff e7       	ldi	r31, 0x7F	; 127
 2a2:	bf 2e       	mov	r11, r31
 2a4:	f0 2d       	mov	r31, r0
			x=PINB;
			if(x!=0X7F)
			{
				r1=3;
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f3 e0       	ldi	r31, 0x03	; 3
 2aa:	cf 2e       	mov	r12, r31
 2ac:	d1 2c       	mov	r13, r1
 2ae:	f0 2d       	mov	r31, r0
			}
			PORTB=0xBF;
			x=PINB;
			if(x!=0XBF)
			{
				r1=2;
 2b0:	68 94       	set
 2b2:	ee 24       	eor	r14, r14
 2b4:	e1 f8       	bld	r14, 1
 2b6:	f1 2c       	mov	r15, r1
			}
			PORTB=0xDF;
			x=PINB;
			if(x!=0XDF)
			{
				r1=1;
 2b8:	01 e0       	ldi	r16, 0x01	; 1
 2ba:	10 e0       	ldi	r17, 0x00	; 0
	
	
	
	while(1)
	{
		if(rgb[9]!=9){
 2bc:	8a 89       	ldd	r24, Y+18	; 0x12
 2be:	9b 89       	ldd	r25, Y+19	; 0x13
 2c0:	09 97       	sbiw	r24, 0x09	; 9
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0x6a>
 2c4:	4a c0       	rjmp	.+148    	; 0x35a <main+0xfe>
			while(1)
			{
				x=PINB;
 2c6:	83 b1       	in	r24, 0x03	; 3
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <x+0x1>
 2ce:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x>
				if(x!=0x0f)
 2d2:	0f 97       	sbiw	r24, 0x0f	; 15
 2d4:	c1 f3       	breq	.-16     	; 0x2c6 <main+0x6a>
					break;
				}
				
			}
			
			PORTB=0xEF;
 2d6:	85 b8       	out	0x05, r8	; 5
			x=PINB;
 2d8:	83 b1       	in	r24, 0x03	; 3
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <x+0x1>
 2e0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x>
			if(x!=0XEF)
 2e4:	8f 3e       	cpi	r24, 0xEF	; 239
 2e6:	91 05       	cpc	r25, r1
 2e8:	31 f0       	breq	.+12     	; 0x2f6 <main+0x9a>
			{
				r1=0;
 2ea:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <r1+0x1>
 2ee:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <r1>
				search();
 2f2:	0e 94 79 00 	call	0xf2	; 0xf2 <search>
			}
			PORTB=0xDF;
 2f6:	95 b8       	out	0x05, r9	; 5
			x=PINB;
 2f8:	83 b1       	in	r24, 0x03	; 3
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <x+0x1>
 300:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x>
			if(x!=0XDF)
 304:	8f 3d       	cpi	r24, 0xDF	; 223
 306:	91 05       	cpc	r25, r1
 308:	31 f0       	breq	.+12     	; 0x316 <main+0xba>
			{
				r1=1;
 30a:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <r1+0x1>
 30e:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <r1>
				search();
 312:	0e 94 79 00 	call	0xf2	; 0xf2 <search>
			}
			PORTB=0xBF;
 316:	a5 b8       	out	0x05, r10	; 5
			x=PINB;
 318:	83 b1       	in	r24, 0x03	; 3
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <x+0x1>
 320:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x>
			if(x!=0XBF)
 324:	8f 3b       	cpi	r24, 0xBF	; 191
 326:	91 05       	cpc	r25, r1
 328:	31 f0       	breq	.+12     	; 0x336 <main+0xda>
			{
				r1=2;
 32a:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <r1+0x1>
 32e:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <r1>
				search();
 332:	0e 94 79 00 	call	0xf2	; 0xf2 <search>
			}
			PORTB=0x7F;
 336:	b5 b8       	out	0x05, r11	; 5
			x=PINB;
 338:	83 b1       	in	r24, 0x03	; 3
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <x+0x1>
 340:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x>
			if(x!=0X7F)
 344:	8f 37       	cpi	r24, 0x7F	; 127
 346:	91 05       	cpc	r25, r1
 348:	09 f4       	brne	.+2      	; 0x34c <main+0xf0>
 34a:	b8 cf       	rjmp	.-144    	; 0x2bc <main+0x60>
			{
				r1=3;
 34c:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <r1+0x1>
 350:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <r1>
				search();
 354:	0e 94 79 00 	call	0xf2	; 0xf2 <search>
 358:	b1 cf       	rjmp	.-158    	; 0x2bc <main+0x60>
		lcd_print("SS EmbeddedWorld");
		_delay_ms(100);
		command(0X01);//Clearing the display.
		_delay_ms(100);*/
		}else{
			command(0X01);//Clearing the display.
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 53 00 	call	0xa6	; 0xa6 <command>
			lcd_print((char*)&(rgb[2]));
 360:	80 e1       	ldi	r24, 0x10	; 16
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_print>
 368:	a9 cf       	rjmp	.-174    	; 0x2bc <main+0x60>

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
